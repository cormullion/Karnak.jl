var documenterSearchIndex = {"docs":
[{"location":"examples/","page":"Examples","title":"Examples","text":"using Karnak, Graphs, NetworkLayout, Colors\nusing DataFrames, CSV, DelimitedFiles\n\n# positions are in LatLong\n\ntubedata = CSV.File(\"../../examples/tubedata-modified.csv\") |> DataFrame\n\namatrix = Matrix(tubedata[:, 4:270])\n\ng = Graph(amatrix)\n\nextrema_lat = extrema(tubedata.Latitude)\nextrema_long = extrema(tubedata.Longitude)\n\n# scale LatLong and flip in y to fit into current drawing\npositions = @. Point(rescale(tubedata.Longitude, extrema_long..., -280, 280), rescale(tubedata.Latitude, extrema_lat..., 280, -280))\n\nstations = tubedata[!,:Station]\n\nfind(str) = findfirst(isequal(str), stations)\nfind(x::Int64) = stations[x]","category":"page"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"This chapter contains a few examples showing how to use drawgraph() to visualize a few graphs.","category":"page"},{"location":"examples/#Julia-type-tree","page":"Examples","title":"Julia type tree","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"This example tries to draw a type hierarchy diagram. The Buchheim layout algorithm can take a list of “vertex widths” that are normalized and then used to assign sufficient space for each label.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"<details closed><summary>Code for this figure</summary>","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"This code generates the figure below:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Karnak, Graphs, NetworkLayout, InteractiveUtils\n\nadd_numbered_vertex!(g) = add_vertex!(g)\n\nfunction build_type_tree(g, T, level=0)\n    add_numbered_vertex!(g)\n    push!(labels, T)\n    for t in subtypes(T)\n        if occursin(\".\",  string(t)) # only Base\n            continue\n        end\n        build_type_tree(g, t, level + 1)\n        add_edge!(g,\n            findfirst(isequal(T), labels),\n            findfirst(isequal(t), labels))\n    end\nend\n\nfunction manhattanline(pt1, pt2)\n    mp = midpoint(pt1, pt2)\n    poly([pt1,\n            Point(pt1.x, mp.y),\n            Point(pt1.x, mp.y),\n            Point(pt2.x, mp.y),\n            Point(pt2.x, mp.y),\n            Point(pt2.x, pt2.y),\n            pt2\n        ], :stroke)\n    circle(pt2, 1, :fill)\nend\n\ng = DiGraph()\nlabels = []\nbuild_type_tree(g, Number)\nlabels = map(string, labels)\n\ndg = @drawsvg begin\n    background(\"grey20\")\n    fontsize(15)\n    fontface(\"JuliaMono-Bold\")\n    setline(1)\n    sethue(\"gold\")\n    nodesizes = Float64[]\n    for l in eachindex(labels)\n        tx = textextents(string(labels[l]))\n        labelwidth = tx[3]\n        push!(nodesizes, labelwidth)\n    end\n    drawgraph(g, margin=50,\n        layout=Buchheim(nodesize=nodesizes),\n        vertexfunction=(v, c) -> begin\n            w = nodesizes[v]\n            bbox  = BoundingBox(box(c[v], w/2, get_fontsize()))\n            # box\n            @layer begin\n                sethue(\"white\")\n                box(bbox, 2, action=:fillpreserve)\n                sethue(\"gold\")\n                strokepath()\n            end\n            #text\n            @layer begin\n                sethue(\"black\")\n                textfit(labels[v], bbox)\n            end\n        end,\n        edgefunction=(n, s, d, f, t) -> manhattanline(f, t)\n    )\nend 1000 550\nnothing # hide","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"</details>","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"dg # hide","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"This graph could do with a bit more tweaking.","category":"page"},{"location":"examples/#Julia-source-tree","page":"Examples","title":"Julia source tree","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"This example takes a Julia expression and displays it as a tree.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Karnak, Graphs, NetworkLayout, Colors\n\n# shamelessly stolen from Professor David Sanders' Tree !\n\nadd_numbered_vertex!(g) = (add_vertex!(g); top = nv(g))\n\nfunction walk_tree!(g, labels, ex, show_call = true)\n    top_vertex = add_numbered_vertex!(g)\n    where_start = 1  # which argument to start with\n    if !(show_call) && ex.head == :call\n        f = ex.args[1]   # the function name\n        push!(labels, f)\n        where_start = 2   # drop \"call\" from tree\n    else\n        push!(labels, ex.head)\n    end\n    for i in where_start:length(ex.args)\n        if isa(ex.args[i], Expr)\n            child = walk_tree!(g, labels, ex.args[i], show_call)\n            add_edge!(g, top_vertex, child)\n        else\n            n = add_numbered_vertex!(g)\n            add_edge!(g, top_vertex, n)\n            push!(labels, ex.args[i])\n        end\n    end\n    return top_vertex\nend\n\nfunction walk_tree(ex::Expr, show_call = false)\n    g = DiGraph()\n    labels = Any[]\n    walk_tree!(g, labels, ex, show_call)\n    return (g, labels)\nend\n\n# build graph and labels\nexpression = :(2 + sin(30) * cos(15) / 2π - log(-1.02^exp(-1)))\n\ng, labels = walk_tree(expression)\n\n@drawsvg begin\n    background(\"grey10\")\n    sethue(\"gold\")\n    drawgraph(g,\n        margin=60,\n            layout = buchheim,\n            vertexlabels = labels,\n            vertexshapes = :circle,\n            vertexshapesizes = 20,\n            edgefunction = (n, s, d, f, t) -> begin\n                move(f)\n                line(t)\n                strokepath()\n            end,\n            vertexlabelfontsizes = 15,\n            vertexlabelfontfaces = \"JuliaMono-Bold\", # probably won't be available for docs\n            vertexlabeltextcolors = colorant\"black\")\n    fontface(\"JuliaMono-Bold\")\n    fontsize(15)\n    text(string(expression), boxbottomcenter() + (0, -20), halign=:center)\nend","category":"page"},{"location":"examples/#LayeredLayouts.jl","page":"Examples","title":"LayeredLayouts.jl","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"LayeredLayouts is a package for working out how to layout graphs in a layered fashion: how to lay out directed acyclic graphs (DAGs), including trees, dependency graphs, and Sankey diagrams.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The package offers the Zarate algorithm (David Cheng Zarate). Positions are returned as x and y vectors, and should be converted to Points when passed to layout.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Graphs\nusing LayeredLayouts\nusing Karnak\n\ntree = SimpleDiGraph(Edge.(\n    [1 => 2, 2 => 3, 4 => 5, 4 => 6, \n     4 => 7, 4 => 8, 4 => 9, 4 => 10, \n     5 => 11, 5 => 12, 8 => 15, 8 => 16, \n     8 => 17, 8 => 18, 8 => 19, 9 => 20, \n     9 => 21, 10 => 22, 12 => 13, 13 => 14, \n     23 => 4, 23 => 24, 23 => 25, 23 => 26, \n     23 => 27, 23 => 28, 23 => 29, 23 => 30, \n     23 => 31, 28 => 32, 28 => 33, 29 => 35, \n     30 => 1, 30 => 38, 31 => 40, 33 => 34, \n     35 => 36, 35 => 37, 38 => 39, 40 => 41, 41 => 42]))\n\nxs, ys, paths = solve_positions(Zarate(), tree)\n\n@draw begin\n    background(\"black\")\n    sethue(\"gold\")\n    drawgraph(tree, \n        vertexlabels = 1:nv(tree),\n        edgestrokecolors = [Karnak.RGB(randomhue()...) for e in 1:ne(tree)],\n        layout= boxmiddleleft() .+ \n            map(pt -> Point(90pt[1], 30pt[2]), zip(xs, ys))\n    )\nend 600 500","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: layered layouts)","category":"page"},{"location":"examples/#Simple-dependency-graph","page":"Examples","title":"Simple dependency graph","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"You can draw a visual interpretation of a Julia package's dependencies easily enough by going through the TOML files.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"<details closed><summary>Code for this figure</summary>","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"This code generates the figure below:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Karnak\nusing Graphs\nusing NetworkLayout\nusing InteractiveUtils\nusing Colors\nusing TOML\nusing Base: active_project\n\n# mostly stolen from PkgGraph.jl by tfiers!\n\nmanifest(proj_path) = replace(proj_path, \"Project.toml\" => \"Manifest.toml\")\n\nif VERSION ≥ v\"1.7\"\n    packages_in(manifest) = TOML.parsefile(manifest)[\"deps\"]\nelse\n    packages_in(manifest) = TOML.parsefile(manifest)\nend\n\npackages_in_active_manifest() = packages_in(manifest(active_project()))\n\nfunction depgraph(pkgname)\n    rootpkg = string(pkgname)\n    packages = packages_in_active_manifest()\n    if rootpkg ∉ keys(packages)\n        error(\"\"\"\n        The given package ($pkgname) must be installed in the active project\n        (which is currently `$(active_project())`)\"\"\")\n    end\n    deps = Vector{Pair{String,String}}()\n    add_deps_of(name) = begin\n        pkg_info = only(packages[name])\n        direct_deps = get(pkg_info, \"deps\", [])\n        for dep in direct_deps\n            push!(deps, name => dep)\n            add_deps_of(dep)\n        end\n    end\n    add_deps_of(rootpkg)\n    return unique!(deps)\nend\n\nfunction build_depgraph(pkgname)\n    dgraphs = depgraph(pkgname)\n    pkglist = String[]\n    for (f, t) in dgraphs\n        if f ∉ pkglist\n            push!(pkglist, f)\n        end\n        if t ∉ pkglist\n            push!(pkglist, t)\n        end\n    end\n    g = DiGraph(length(pkglist))\n    for (f, t) in dgraphs\n        if f ∈ pkglist && t ∈ pkglist\n            add_edge!(g, findfirst(isequal(f), pkglist), findfirst(isequal(t), pkglist))\n        end\n    end\n    return g, pkglist\nend\n\ng, pkgnames = build_depgraph(\"DataFrames\")\n\nd = @drawsvg begin\n    background(\"grey5\")\n    sethue(\"gold\")\n    fontsize(10)\n    fontface(\"Avenir-Black\")\n    drawgraph(\n        g,\n        margin=40,\n        layout = Stress(iterations = 100),\n        edgegaps = 13,\n        edgestrokeweights = 3,\n        edgecurvature = 4,\n        edgestrokecolors = [HSB(360rand(), 0.7, 0.8) for i in 1:ne(g)],\n        vertexlabels = (vtx) -> begin   \n            string(pkgnames[vtx])\n        end,\n        vertexshapes = (v) -> begin\n            tx = textextents(pkgnames[v])\n            @layer begin\n                setopacity(0.8)\n                sethue(\"grey80\")\n                box(O, 1.2tx[5], 1.5tx[4], 5, :fill)\n            end\n        end,\n    )\nend 800 700\nnothing # hide","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"</details>","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"d # hide","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"There's an extended investigation of package dependencies later in this section.","category":"page"},{"location":"examples/#The-London-Tube","page":"Examples","title":"The London Tube","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"One real-world example of a small network is the London Underground, known as “the Tube”. The 250 or so stations in the network can be modelled using a simple graph.","category":"page"},{"location":"examples/#Setup","page":"Examples","title":"Setup","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"If you want to follow along, this is the setup required. The CSV file examples/tubedata-modified.csv contains the station names, latitude and longitudes, and connectivity details.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Karnak, Graphs, NetworkLayout, Colors\nusing DataFrames, CSV\n\n# positions are in LatLong\n\ntubedata = CSV.File(\"examples/tubedata-modified.csv\") |> DataFrame\n\namatrix = Matrix(tubedata[:, 4:270])\n\nextrema_lat = extrema(tubedata.Latitude)\nextrema_long = extrema(tubedata.Longitude)\n\n# scale LatLong and flip in y to fit into current drawing\n\npositions = @. Point(\n    rescale(tubedata.Longitude, extrema_long..., -280, 280),\n    rescale(tubedata.Latitude, extrema_lat..., 280, -280))\n\nstations = tubedata[!,:Station]\n\nfind(str) = findfirst(isequal(str), stations)\nfind(x::Int64) = stations[x]\n\ng = Graph(amatrix)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The tube “map” is stored in g, as a {267, 308} undirected simple Int64 graph.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The find() functions are just a quick way to convert between station names and ID numbers:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"find(\"Waterloo\")","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"find(244)","category":"page"},{"location":"examples/#Not-a-map","page":"Examples","title":"Not a map","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Most London residents and visitors are used to seeing the famous Tube Map:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: tube map)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"It’s a design classic, hand-drawn by Harry Beck in 1931, and updated regularly ever since. As an electrical engineer, Beck represented the sprawling London track network as a tidy circuit board. For Beck, the important thing about the map was to show the connections, rather than the accurate geography.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Our version looks very different, but it is at least geographically more accurate, because the latitude and longitude values of the stations are passed to layout.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"@drawsvg begin\nbackground(\"grey10\")\nsethue(\"grey50\")\ndrawgraph(g,\n    layout = positions,\n    vertexshapes = :none,\n    vertexlabeltextcolors = colorant\"white\",\n    vertexlabels = find.(1:nv(g)),\n    vertexlabelfontsizes = 6)\nend","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The layout algorithms - layout = spring and layout = stress - do a reasonable job, but people like to see north at the top of maps, and south at the bottom, not mixed up in any direction, like these.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"@drawsvg begin\nbackground(\"grey20\")\ntiles = Tiler(800, 400, 1, 2)\nsethue(\"white\")\n\n@layer begin\n    translate(first(tiles[1]))\n    drawgraph(g,\n        layout=spring,\n        boundingbox = BoundingBox(box(O, 400, 400)),\n        vertexshapes = :none,\n        vertexlabeltextcolors = colorant\"white\",\n        vertexlabels = find.(1:nv(g)),\n        vertexlabelfontsizes = 6\n        )\nend\n\n@layer begin\n    translate(first(tiles[2]))\n    drawgraph(g,\n        layout=stress,\n        boundingbox = BoundingBox(box(O, 400, 400)),\n        vertexshapes = :none,\n        vertexlabeltextcolors = colorant\"white\",\n        vertexlabels = find.(vertices(g)),\n        vertexlabelfontsizes = 6\n        )\nend\n\nend 800 400","category":"page"},{"location":"examples/#Train-terminates-here","page":"Examples","title":"Train terminates here","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Use the degree() function to show just the station names at the end of a line: a vertex with a degree of 1 is a terminus:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"@drawsvg begin\nbackground(\"grey90\")\nsethue(\"black\")\ndrawgraph(g, layout=positions,\n    vertexshapesizes = 2,\n    vertexlabels = [(degree(g, n) == 1) ? find(n) : \"\"\n        for n in vertices(g)],\n    vertexlabeltextcolors = colorant\"blue\"\n    )\nend","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"These labels show names familiar to all Tube-riders - the ones shown on the front of trains and on platform indicators. (It's unusual to visit them all, unless you're like Geoff Marshall, who holds the world record for the fastest time visiting every Tube station.)","category":"page"},{"location":"examples/#Neighbors","page":"Examples","title":"Neighbors","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The best connected station is also one of the oldest, dating back to 1863:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"find(argmax(degree(g, 1:nv(g))))","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Its neighbors are:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"find.(neighbors(g, find(\"Baker Street\")))","category":"page"},{"location":"examples/#Centrality","page":"Examples","title":"Centrality","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Using Graphs.jl's tools for measuring centrality, Baker Street is again at the top of the list, but Green Park (the Queen's nearest tube station), scores highly, despite not being in the top 20 busiest stations.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"@drawsvg begin\nbackground(\"grey10\")\ntranslate(0, -200)\nscale(3)\nbc = betweenness_centrality(g)\nsethue(\"gold\")\n_, maxbc = extrema(bc)\ndrawgraph(g, layout = positions,\n    vertexlabels = (vtx) -> bc[vtx] > maxbc * 0.6 && string(find(vtx)),\n    vertexlabeltextcolors = colorant\"cyan\",\n    vertexlabelfontsizes = 6,\n    vertexshapesizes = 1 .+ 10bc,\n    vertexfillcolors = HSB.(rescale.(bc, 0, maximum(bc), 0, 300), 0.7, 0.8),\n    )\nend 800 600","category":"page"},{"location":"examples/#Mornington-Crescent","page":"Examples","title":"Mornington Crescent","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"A route from Heathrow Terminal 5 to Mornington Crescent can be found using a_star().","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"heathrow_to_morningtoncrescent = a_star(g,\n    find(\"Heathrow Terminal 5\"),\n    find(\"Mornington Crescent\"))\n\n@drawsvg begin\nbackground(\"grey70\")\ntranslate(0, -100)\nscale(3)\n\nsethue(\"grey50\")\ndrawgraph(g,\n    layout = positions,\n    vertexshapesizes = 1)\n\nsethue(\"black\")\nfontsize(4)\ndrawgraph(g,\n    layout = positions,\n    vertexshapes = :none,\n    edgelist = heathrow_to_morningtoncrescent,\n    edgestrokeweights = 3,\n    vertexlabels = (vtx) -> begin\n        if vtx ∈ src.(heathrow_to_morningtoncrescent) ||\n           vtx ∈ dst.(heathrow_to_morningtoncrescent)\n             circle(positions[vtx], 2, :fill)\n             label(find(vtx), :e, positions[vtx])\n        end\n    end)\nend","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The route found by a_star is:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"[find(dst(e)) for e in heathrow_to_morningtoncrescent]","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Information about the required changes - at Victoria from the Piccadilly line to the Victoria Line, and at Warren Street from the Victoria Line to the Northern Line - is not part of the graph. Routes across the Tube network, like the trains, follow the tracks (edges). The concept of “lines” (Victoria, Circle, etc) isn’t part of the graph structure, but a colorful layer imposed on top of the track network.","category":"page"},{"location":"examples/#Pandemic","page":"Examples","title":"Pandemic","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Graphs.jl provides many functions for analysing graph networks. The diffusion() function appears to simulate the diffusion of an infection from some starting vertices and the probability of spreading.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The function returns an array of arrays, where each one contains the vertex numbers of newly \"infected\" vertices. For example, in this result:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"[[1], Int64[], [22, 15, 25], ...]","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"the first stage showed vertex 1 \"infected\"; stage two was free of incident; but on stage 3 vertices 22, 15, and 25 have become \"infected\".","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"So here, apparently, is a simulation of what might happen when an infection arrives at Heathrow Airport's Terminal 5 tube station, and starts spreading through the tube network.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"function frame(scene, framenumber, diffresult)\n    background(\"black\")\n    sethue(\"gold\")\n    text(string(framenumber), boxbottomleft() + (10, -10))\n    drawgraph(g, layout = positions, vertexshapesizes = 3)\n    for k in 1:framenumber\n        i = diffresult[k]\n        drawgraph(\n            g,\n            layout = positions,\n            edgelines = 0,\n            vertexfunction = (v, c) -> begin\n                if !isempty(i)\n                    if v ∈ i\n                        sethue(\"red\")\n                        circle(positions[v], 5, :fill)\n                    end\n                end\n            end,\n        )\n    end\nend\n\nfunction main()\n    amovie = Movie(600, 600, \"diff\")\n    diffresult = diffusion(g, 0.2, 200, initial_infections=[find(\"Heathrow Terminal 5\")])\n    animate(amovie,\n        Scene(amovie, (s, f) -> frame(s, f, diffresult), 1:length(diffresult)),\n        framerate=10,\n        creategif=true,\n        pathname=\"/tmp/diff.gif\")\nend\nmain()","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: diffusion)","category":"page"},{"location":"examples/#The-JuliaGraphs-logo","page":"Examples","title":"The JuliaGraphs logo","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The current logo for the Graphs.jl package was easily drawn using Karnak.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"I wanted to use the graph coloring feature (greedy_color()), but unfortunately it was too clever, managing to color the graph using only two colors instead of the four I was hoping to use.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Graphs\nusing Karnak\nusing Colors\n\nfunction lighten(col::Colorant, f)\n    c = convert(RGB, col)\n    return RGB(f * c.r, f * c.g, f * c.b)\nend\n\nfunction julia_sphere(pt::Point, w, col::Colorant;\n        action = :none)\n    setmesh(mesh(\n        makebezierpath(box(pt, w * 1.5, w * 1.5)),\n        [lighten(col, .5),\n         lighten(col, 1.75),\n         lighten(col, 1.25),\n         lighten(col, .6)]))\n    circle(pt, w, action)\nend\n\nfunction draw_edge(pt1, pt2)\n    for k in 0:0.1:1\n        setline(rescale(k, 0, 1, 25, 1))\n        sethue(lighten(colorant\"grey50\", rescale(k, 0, 1, 0.5, 1.5)))\n        setopacity(rescale(k, 0, 1, 0.5, 0.75))\n        line(pt1, pt2, :stroke)\n    end\nend\n\n# positions for vertices\n\nouterpts = ngonside(O, 450, 4, π/4, vertices=true)\ninnerpts = ngonside(O, 150, 4, π/2, vertices=true)\npts = vcat(outerpts, innerpts)\n\ncolors = map(c -> RGB(c...),\n    [Karnak.Luxor.julia_blue, Karnak.Luxor.julia_red, Karnak.Luxor.julia_green, Karnak.Luxor.julia_purple])\n\n@drawsvg begin\n    squircle(O, 294, 294, :clip, rt=0.2)\n    sethue(\"black\")\n    paint()\n    g = SimpleGraph([\n        Edge(1,2), Edge(2,3), Edge(3,4), Edge(1,4),\n        Edge(5,6), Edge(6,7), Edge(7,8), Edge(5,8),\n        Edge(1,5), Edge(2,6), Edge(3,7), Edge(4,8),\n        ])\n\n    drawgraph(Graph(g),\n        layout=pts,\n        vertexfunction = (v, c) -> begin\n            d = distance(O, c[v])\n            d > 200 ? k = 0 : k = 1\n            julia_sphere(c[v],\n                 rescale(d, 0, 200, 52, 50), colors[mod1(v + k, 4)],\n                action=:fill)\n        end,\n        edgefunction = (k, s, d, f, t) -> draw_edge(f, t)\n        )\nend","category":"page"},{"location":"examples/#Julia-Package-Dependencies","page":"Examples","title":"Julia Package Dependencies","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"This example was originally developed by Mathieu Besançon and presented as part of the workshop: Analyzing Graphs at Scale, at JuliaCon 2020. You can watch the video on YouTube.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The most important changes since the video was made are:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"the renaming of LightGraphs.jl to Graphs.jl\nthe way to access the list of packages has changed","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The code builds a dependency graph of the connections (ie which package depends on which package) for Julia packages in the General registry.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Then it's possible draw some pictures, such as this chonky SVG file showing the dependencies for the Colors.jl package:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: package dependencies for Colors)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Or this one, which attempts to highlight just the more connected packages in the Colors.jl dependency graph:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: package dependencies for Colors)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Setup:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Graphs\nusing MetaGraphs\nusing TOML\nusing Karnak\nusing Colors","category":"page"},{"location":"examples/#Finding-the-general-registry","page":"Examples","title":"Finding the general registry","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"On my computer, the registry is in its default location. You might need to modify these lines if yours is is another location:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"path_to_general = expanduser(\"~/.julia/registries/General\")\nregistry_file = Pkg.TOML.parsefile(joinpath(path_to_general, \"Registry.toml\"))\npackages_info = registry_file[\"packages\"];","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"First we need the name and location of every package:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Julia <= v1.6\npkg_paths = map(values(packages_info)) do d\n    (name = d[\"name\"], path = d[\"path\"])\nend","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Julia >= v1.7\npkg_paths = map(values(Pkg.Registry.reachable_registries()[1].pkgs)) do d\n    (name = d.name, path = d.path)\nend","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The result in pkg_paths is a vector of tuples, containing the name and location of every package:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"7495-element Vector{NamedTuple{(:name, :path), Tuple{String, String}}}:\n (name = \"COSMA_jll\", path = \"C/COSMA_jll\")\n (name = \"CitableImage\", path = \"C/CitableImage\")\n (name = \"Trixi2Img\", path = \"T/Trixi2Img\")\n (name = \"ImPlot\", path = \"I/ImPlot\")","category":"page"},{"location":"examples/#Find-packages-that-depend-on-a-specific-package","page":"Examples","title":"Find packages that depend on a specific package","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The function find_direct_deps() finds all the packages (names and locations) that directly depend on a specific named package.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"function find_direct_deps(registry_path, pkg_paths, source)\n    filter(pkg_paths) do pkg_path\n        deps_file = joinpath(registry_path, pkg_path.path, \"Deps.toml\")\n        # some packages don't have Deps.toml file\n        isfile(deps_file) && begin\n            deps_struct = Pkg.TOML.parsefile(deps_file)\n            any(values(deps_struct)) do d\n                source in keys(d)\n            end\n        end\n    end\nend","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We can now find out how many packages depend on a particular package. For example, how many packages depend on Colors.jl (my favourite)?","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"find_direct_deps(path_to_general, pkg_paths, \"Colors\")","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"giving this result:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"227-element Vector{NamedTuple{(:name, :path), Tuple{String, String}}}:\n (name = \"TopologyPreprocessing\", path = \"T/TopologyPreprocessing\")\n (name = \"DynamicGrids\", path = \"D/DynamicGrids\")\n (name = \"SimpleSDMLayers\", path = \"S/SimpleSDMLayers\")\n (name = \"UnderwaterAcoustics\", path = \"U/UnderwaterAcoustics\")\n (name = \"ColorSchemeTools\", path = \"C/ColorSchemeTools\")\n (name = \"PrincipalMomentAnalysisApp\", path = \"P/PrincipalMomentAnalysisApp\")\n ⋮\n (name = \"SoilWater_ToolBox\", path = \"S/SoilWater_ToolBox\")\n (name = \"Starlight\", path = \"S/Starlight\")\n (name = \"Dojo\", path = \"D/Dojo\")\n (name = \"OpticSim\", path = \"O/OpticSim\")\n (name = \"LVServer\", path = \"L/LVServer\")","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Colors.jl has 227 packages that depend on it. When Mathieu ran this code in 2020 on \"LightGraphs\", the vector had 92 elements. Today, in 2022, for \"Graphs\", the vector has 115 elements.","category":"page"},{"location":"examples/#Build-a-directed-tree","page":"Examples","title":"Build a directed tree","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The next function, build_tree(), will build a directed graph of the dependencies on Colors.jl. Starting at the root package (Colors) the loop finds all its dependencies, then finds the dependencies of all of those dependent packages, and continues doing this until it reaches packages that have no dependencies. These are the \"leaves\" at the tip of the tree's branches.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"function build_tree(registry_path, pkg_paths, root)\n    g = MetaDiGraph()\n    add_vertex!(g)\n    set_prop!(g, 1, :name, root)\n    i = 1\n    explored_nodes = Set{String}((root,))\n    while true\n        i % 50 == 0 && print(i, \" \")\n        current_node = get_prop(g, i, :name)\n        direct_deps = find_direct_deps(registry_path, pkg_paths, current_node)\n        filter!(d -> d.name ∉ explored_nodes, direct_deps)\n        if isempty(direct_deps) && i >= nv(g)\n           break\n        end\n        for ddep in direct_deps\n           push!(explored_nodes, ddep.name)\n           add_vertex!(g)\n           set_prop!(g, nv(g), :name, ddep.name)\n           add_edge!(g, i, nv(g))\n        end\n        i += 1\n    end\n    return g\nend","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"note: Note\nThis function takes some time to run - about 8 minutes for about 1400 iterations on my computer.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"g = build_tree(path_to_general, pkg_paths, \"Colors\")\n\n{1375, 1374} directed Int64 metagraph with Float64 weights defined by :weight (default weight 1.0)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Notice that there are 1375 nodes, but one less edge. The Colors.jl package is the root of the tree, and doesn't connect to anything else, in this analysis.) Of course, it depends on quite a few, but that's another graph story.)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The result is a directed metagraph. In a metagraph, as implemented by MetaGraphs.jl, it's possible to add information to vertices using set_prop() and get_prop().","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"To find all the package names in the graph that are directly connected to Colors.jl, we can broadcast get_prop() like this:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"get_prop.(Ref(g), outneighbors(g, 1), :name)\n\n227-element Vector{String}:\n \"SqState\"\n \"InteractBase\"\n \"ImageMetadata\"\n \"PlantGeom\"\n \"MicrobiomePlots\"\n \"MeshViz\"\n \"SGtSNEpi\"\n \"ColorSchemes\"\n \"CairoMakie\"\n ⋮\n \"GenomicMaps\"\n \"ModiaPlot\"\n \"Thebes\"\n \"ConstrainedDynamics\"\n \"AutomotiveVisualization\"\n \"Flux\"","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"outneighbors returns a list of all neighbors connected to vertex v by an outgoing edge.","category":"page"},{"location":"examples/#Shortest-paths-and-lengths-of-branches","page":"Examples","title":"Shortest paths and lengths of branches","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The dijkstra_shortest_paths() function finds the paths between the designated package and all its dependencies.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The returned value is a DijkstraState object, with fields parents, dists, predecessors, pathcounts, and closest_vertices.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Looking at the dists (distances), we see that one package is very close indeed at 0.0 - that's Colors.jl itself.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"spath_result = dijkstra_shortest_paths(g, 1)\n\nspath_result.dists\n\n1375-element Vector{Float64}:\n 0.0\n 1.0\n 1.0\n 1.0\n 1.0\n 1.0\n 1.0\n ⋮\n 5.0\n 5.0\n 5.0\n 6.0\n 6.0\n 6.0\n 6.0\n 6.0\n 6.0\n 7.0\n 7.0","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Or in a barchart:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"scores = [count(==(i), spath_result.dists) for i in unique(spath_result.dists)]","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Karnak # hide\nscores = [1, 227, 539, 376, 161, 63, 6, 2] # hide\n@drawsvg begin # hide\n    sethue(\"gold\") # hide\n    barchart(scores, labels=true) # hide\nend 600 260 # hide","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The \"furthest\" packages from Colors.jl - the two seven steps away - are:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"for idx in eachindex(spath_result.dists)\n    if spath_result.dists[idx] == 7\n         println(get_prop(g, idx, :name))\n    end\nend\n\nQuantumESPRESSOExpress\nRecommenders","category":"page"},{"location":"examples/#Computing-a-full-subgraph","page":"Examples","title":"Computing a full subgraph","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"All the package names are obtained with:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"all_packages = get_prop.(Ref(g), vertices(g), :name)\n\nVector{String}:\n \"Colors\"\n \"TopologyPreprocessing\"\n \"DynamicGrids\"\n \"SimpleSDMLayers\"\n \"UnderwaterAcoustics\"\n \"ColorSchemeTools\"\n ⋮\n \"ReservoirComputing\"\n \"TreeParzen\"\n \"GeoStatsImages\"\n \"StoppingInterface\"\n \"QuantumESPRESSO\"\n \"Recommenders\"\n \"QuantumESPRESSOExpress\"","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"These next commands build a metagraph, using the package names:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"full_graph = MetaDiGraph(length(all_packages))\n\n{1375, 0} directed Int64 metagraph with Float64 weights defined by :weight (default weight 1.0)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Assigning names to the vertices:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"for v in vertices(full_graph)\n    set_prop!(full_graph, v, :name, all_packages[v])\nend","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Build the full graph:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"for v in vertices(full_graph)\n    pkg_name = get_prop(full_graph, v, :name)\n    dependent_packages = find_direct_deps(path_to_general, pkg_paths, pkg_name)\n    for dep_pkg in dependent_packages\n        pkg_idx = findfirst(==(dep_pkg.name), all_packages)\n        # only packages in graph\n        if pkg_idx !== nothing\n            add_edge!(full_graph, pkg_idx, v)\n        end\n    end\nend","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"It's useful to be able to save and load this graph:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"# using Graphs, MetaGraphs\n# save:\nsavegraph(\"examples/full_graph.lg\", full_graph))\n\n# load:\nfull_graph = loadgraph(\"examples/full_graph.lg\", MGFormat())","category":"page"},{"location":"examples/#All-roads-lead-to-home","page":"Examples","title":"All roads lead to home","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The code in this next example draws the vertices as an impressionistic point cloud, and uses the a_star() function to find a path from some random package back to Colors.jl.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"@drawsvg begin\n    background(\"black\")\n    sethue(\"white\")\n    fontface(\"BarlowCondensed-Bold\")\n    random_package = rand(1:nv(full_graph))\n    astar = a_star(full_graph, random_package, 1)\n    astar_vertices = sort(unique(vcat([src(e) for e in astar], [dst(e) for e in astar])), rev=true)\n    drawgraph(g,\n        edgelist=astar,\n        layout=spring,\n        vertexlabels = (v) -> v ∈ astar_vertices[[begin, end]] && get_prop(full_graph, v, :name),\n        vertexlabeltextcolors = colorant\"white\",\n        vertexlabelfontsizes = 20,\n        vertexlabelfontfaces = \"BarlowCondensed-Bold\",\n        vertexshapesizes = .5,\n        vertexstrokecolors = :none)\n    textfit(string(join(get_prop.(Ref(full_graph), astar_vertices, :name), \" > \")),\n        BoundingBox(box(boxbottomcenter() + (0, -30), 600, 50)))\nend 800 800","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: chain of deps)","category":"page"},{"location":"examples/#Pagerank","page":"Examples","title":"Pagerank","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"This code computes the pagerank of the graph. It returns a long list of numbers, the centrality score for each vertex.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"ranks = pagerank(full_graph)\n\n1375-element Vector{Float64}:\n 0.15339826572024867\n 0.00020384989099126913\n 0.00043081071431843264\n 0.0002471787754446367\n 0.0005504809666182096\n 0.00020384989099126913\n 0.00020384989099126913\n 0.00034105802509359976\n 0.0012284800170342895\n ⋮\n 0.00020384989099126913\n 0.00020384989099126913\n 0.00042629607921470863\n 0.00020384989099126913\n 0.0002616217369290926","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"@drawsvg begin\n    background(\"black\")\n    sethue(\"white\")\n    fontface(\"BarlowCondensed-Bold\")\n    ranks = pagerank(full_graph)\n    drawgraph(g,\n        edgelist = [],\n        layout=spring,\n        vertexshapes = :none,\n        vertexlabels = (v) -> ranks[v] > 0.001 && get_prop(full_graph, v, :name),\n        vertexlabelfontsizes = 500ranks,\n        vertexlabeltextcolors = colorant\"white\")\nend 800 800","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: pagerank)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The problem with this representation is one of overlapping labels. This isn't an issue we can fix easily in Karnak.","category":"page"},{"location":"examples/#Highly-ranked","page":"Examples","title":"Highly ranked","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"With some sorting, we can find the highest ranked packages in this part of the ecosystem.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"sorted_indices = sort(eachindex(ranks), by=i->ranks[i], rev=true)\n\n1375-element Vector{Int64}:\n   1\n 543\n 137\n 112\n 144\n 164\n   ⋮\n 259\n 258\n 729\n 730\n 688","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"get_prop.(Ref(full_graph), sorted_indices, :name)\n\n1375-element Vector{String}:\n \"Colors\"\n \"Plots\"\n \"ImageCore\"\n \"PlotUtils\"\n \"ColorSchemes\"\n \"ColorVectorSpace\"\n ⋮\n \"TopOptMakie\"\n \"VTKDataIO\"\n \"EFTfitter\"\n \"SpmGrids\"\n \"ElectronTests\"","category":"page"},{"location":"examples/#Most-dependencies,-most-depended-on","page":"Examples","title":"Most dependencies, most depended on","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"indegree() returns the number of edges which end at a vertex. For a package, this is another way of seeing how many other packages depend on it.  ","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"in_sorted_indices = sort(vertices(full_graph),\n    by = i -> indegree(full_graph, i), rev = true)\n\n1375-element Vector{Int64}:\n 543\n   1\n  65\n  98\n 133\n 137\n   ⋮\n 287\n 743\n 744\n 285\n 688","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"get_prop.(Ref(full_graph), in_sorted_indices, :name)\n\n1375-element Vector{String}:\n \"Plots\"\n \"Colors\"\n \"Flux\"\n \"Images\"\n \"PyPlot\"\n \"ImageCore\"\n ⋮\n \"PolaronMobility\"\n \"CineFiles\"\n \"MadNLPGraph\"\n \"MicroscopyLabels\"\n \"ElectronTests\"","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"outdegree() finds the number of edges which start at a vertex.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"out_sorted_indices = sort(vertices(full_graph),\n    by = i -> outdegree(full_graph, i), rev=true)\n\n1375-element Vector{Int64}:\n 372\n  98\n  35\n  24\n 300\n 153\n   ⋮\n 776\n 777\n 778\n 779\n   1","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"get_prop.(Ref(full_graph), out_sorted_indices, :name)\n\n1375-element Vector{String}:\n \"StatisticalRethinking\"\n \"Images\"\n \"Makie\"\n \"MakieGallery\"\n \"PredictMDExtra\"\n \"GLMakie\"\n ⋮\n \"MimiPAGE2020\"\n \"MimiSNEASY\"\n \"OptiMimi\"\n \"SyntheticNetworks\"\n \"Colors\"","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"ranks_betweenness = betweenness_centrality(full_graph)\n\n1375-element Vector{Float64}:\n 0.0\n 0.0\n 3.1186467511475384e-5\n 5.300816007616213e-7\n 5.830897608377834e-5\n 0.0\n ⋮\n 0.0\n 0.0\n 4.24065280609297e-6\n 0.0\n 1.0601632015232426e-6","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"sorted_indices_betweenness = sort(vertices(full_graph),\n    by = i -> ranks_betweenness[i], rev=true)\n\n1375-element Vector{Int64}:\n 144\n  98\n 112\n 543\n 461\n  35\n   ⋮\n 562\n 563\n 564\n 565\n   1","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"get_prop.(Ref(full_graph), sorted_indices_betweenness, :name)\n\n1375-element Vector{String}:\n \"ColorSchemes\"\n \"Images\"\n \"PlotUtils\"\n \"Plots\"\n \"ImageIO\"\n \"Makie\"\n ⋮\n \"BridgeDiffEq\"\n \"BridgeLandmarks\"\n \"FCA\"\n \"BEASTDataPrep\"\n \"Colors\"","category":"page"},{"location":"examples/#Is_cyclic","page":"Examples","title":"Is_cyclic","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"is_cyclic() returns true if the graph contains a cycle.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"is_cyclic(full_graph)\n\ntrue\n\nfor cycle in simplecycles(full_graph)\n    names = get_prop.(Ref(full_graph), cycle, :name)\n    @info names\nend\n\n[\"ImageCore\", \"MosaicViews\"]\n[\"Images\", \"ImageSegmentation\"]\n[\"Makie\", \"GLMakie\"]\n[\"POMDPPolicies\", \"BeliefUpdaters\", \"POMDPModels\", \"POMDPSimulators\"]\n[\"BeliefUpdaters\", \"POMDPModels\"]\n[\"BeliefUpdaters\", \"POMDPModels\", \"POMDPSimulators\"]\n[\"ReinforcementLearning\", \"ReinforcementLearningEnvironmentDiscrete\"]\n[\"Modia3D\", \"Modia\"]\n[\"RasterDataSources\", \"GeoData\"]\n[\"DSGE\", \"StateSpaceRoutines\"]","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"For that first cycle: ImageCore.jl's Project.toml file has MosaicViews.jl in its [deps] section, and MosaicViews.jl has ImageCore.jl in the [extras] section of its Project.toml file.","category":"page"},{"location":"examples/#Draw-some-graphs","page":"Examples","title":"Draw some graphs","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Visualizations of graphs are sometimes (often?) better at communicating vague ideas such as complexity and shape. But it's quite difficult to render graphs as rich as these to show the connections clearly while also showing all the labels such that they're easy to read.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The solution may be to print out these graph representations and stick them on a nearby wall, although, with Julia's General Registry changing every day, it would be out of date before the glue dries.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: wall art office graph dependency)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The images above were made with the following code.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"@pdf begin\n    background(\"black\")\n    sethue(\"gold\")\n    setline(0.3)\n    drawgraph(g,\n        layout = stress,\n        edgefunction = (k, s, d, f, t) -> begin\n            @layer begin\n                sl = slope(O, t)\n                sethue(HSVA(rescale(sl, 0, 2π, 0, 360), 0.7, 0.7, .9))\n                line(f, t, :stroke)\n            end\n        end,\n        vertexfunction = (v, c) -> begin\n            @layer begin\n                t = get_prop(g, v, :name)\n                te = textextents(t)\n                setopacity(0.7)\n                sethue(\"grey10\")\n                fontsize(3)\n                box(c[v], te[3]/2, te[4]/2, :fill)\n                setopacity(1)\n                sethue(\"white\")\n                text(t, c[v], halign=:center, valign=:middle)\n            end\n        end)\n    @info \" finish drawing\"\nend 2500 2500 \"/tmp/graph-dependencies-colors.pdf\"","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using ColorSchemes\n\n@svg begin\n    background(\"black\")\n    maxdeg = maximum(degree(full_graph))\n    drawgraph(full_graph,\n        layout = spring,\n        edgelines = 0,\n        vertexfunction = (v, c) -> begin\n            d = degree(full_graph, v)\n            @layer begin\n                sethue(get(ColorSchemes.darkrainbow, rescale(d, 1, maxdeg)))\n                circle(c[v], rescale(d, 1, 270, 2, 20), :fill)\n            end\n            if d > 20\n                fontsize(rescale(d, 1, maxdeg, 5, 20))\n                setcolor(\"white\")\n                textoutlines(all_packages[v], c[v], halign=:center, valign=:bottom, :fill)\n                setline(rescale(d, 1, maxdeg, 0.25, 1))\n                sethue(\"black\")\n                textoutlines(all_packages[v], c[v], halign=:center, valign=:bottom, :stroke)\n            end\n        end)\nend 1200 1200 \"/tmp/graph-dependencies-2.svg\"","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"using Karnak, Graphs, NetworkLayout, Colors, SimpleWeightedGraphs","category":"page"},{"location":"basics/#Graph-theory","page":"Basic graphs","title":"Graph theory","text":"","category":"section"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"This section contains an introduction to basic graph theory using the Graphs.jl package, illustrated with figures made with Karnak.jl. You don't need any prior knowledge of graphs, but you should be familiar with the basics of programming in Julia.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"note: Note\nAll the figures in this manual are generated when the pages are built by Documenter.jl, and the code to draw them is included here. To run the examples, you'll need the packages  Karnak, Graphs, NetworkLayout, Colors, and possibly SimpleWeightedGraphs.","category":"page"},{"location":"basics/#Graphs,-vertices,-and-edges","page":"Basic graphs","title":"Graphs, vertices, and edges","text":"","category":"section"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"Graph theory is used for analysing networks and the relationships between things in the network.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"<details closed><summary>Code for this figure</summary>","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"This code generates the figure below.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"using Karnak, Graphs, NetworkLayout, Colors, SimpleWeightedGraphs\nd = @drawsvg begin\n    background(\"grey10\")\n    sethue(\"yellow\")\n    fontsize(12)\n    g = Graph(3, 3)\n    add_vertex!(g)\n    add_edge!(g, 3, 4)\n    drawgraph(g,\n        layout=spring,\n        margin=50,\n        edgecurvature=0.2,\n        edgegaps=30,\n        edgestrokeweights=2,\n        vertexlabels = (v) -> \"thing $(v)\",\n        vertexshapes = :circle,\n        vertexfillcolors = [RGB(Karnak.Luxor.julia_red...), RGB(Karnak.Luxor.julia_purple...), RGB(Karnak.Luxor.julia_green...), RGB(Karnak.Luxor.julia_blue...)],\n        vertexshapesizes = 25,\n        vertexlabeltextcolors = colorant\"white\",\n        edgelabels=(n, s, d, f, t) -> begin\n            θ = slope(f, t)\n            fontsize(12)\n            translate(midpoint(f, t))\n            rotate(θ)\n            sethue(\"white\")\n            label(\"$s and $d\", [:n, :n, :s, :n][n], O, offset=10)\n            sethue(\"orange\")\n            label(\"edge $n\", [:n, :n, :s, :n][n], O, offset=-15)\n        end,\n        )\nend 600 350\nnothing #hide","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"</details>","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"d # hide","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"A typical graph consists of:","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"vertices, which represent the things or entities, and\nedges, which describe how two things or entities connect and relate to each other","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"Vertices are also called nodes in the world of graph theory.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"The Graphs.jl package provides many ways to create graphs. We'll start off with this basic approach:","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"using Graphs\ng = Graph()","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"The Graph() function creates a new empty graph and stores it in g. (SimpleGraph() is an alternative to Graph().) Let's add a single vertex:","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"add_vertex!(g)","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"We can easily add a number of new vertices:","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"add_vertices!(g, 3)","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"The graph has four vertices now. We can refer to them as 1, 2, 3, and 4.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"We'll join some pairs of vertices with an edge:","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"add_edge!(g, 1, 2)  # join vertex 1 with vertex 2\nadd_edge!(g, 1, 3)\nadd_edge!(g, 2, 3)\nadd_edge!(g, 1, 4)","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"In Graphs.jl, vertices are always numbered from 1 to n.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"g is now a {4, 4} undirected simple Int64 graph}.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"It's time to see some kind of visual representation of the graph we've made.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"using Karnak, Graphs\n\ng = Graph()\nadd_vertices!(g, 4)\nadd_edge!(g, 1, 2)\nadd_edge!(g, 1, 3)\nadd_edge!(g, 2, 3)\nadd_edge!(g, 1, 4)\n\n@drawsvg begin\n    background(\"grey10\")\n    sethue(\"orange\")\n    drawgraph(g, vertexlabels = [1, 2, 3, 4])\nend 600 300","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"This is just one of the many ways this graph can be represented visually. The locations of the vertices as drawn here are not part of the graph's definition. The default styling uses the current Luxor color, with small circles marking the vertex positions. drawgraph() places the graphics for the graph on the current Luxor drawing.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"note: Note\nSVG is used in this manual because it's a good format for line drawings, but you can also use Karnak.jl to create PDF or PNG.  See the Luxor documentation for details.  PNG is a good choice if the graphics get very complex, since large SVGs can tax web browsers.","category":"page"},{"location":"basics/#Undirected-and-directed-graphs","page":"Basic graphs","title":"Undirected and directed graphs","text":"","category":"section"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"We'll meet two main types of graph, undirected and directed. In our undirected graph g above, vertex 1 and vertex 2 are neighbors, connected with an edge, but there's no way to specify or see a direction for that connection. For example, if the graph was modelling people making financial transactions, we couldn't tell whether the person at vertex 1 sent money to the person at vertex 2, or received money from them.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"In Graphs.jl, we can create directed graphs with DiGraph() (also SimpleDiGraph()).","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"gd = DiGraph() \nadd_vertices!(gd, 4) \nadd_edge!(gd, 1, 2) \nadd_edge!(gd, 1, 3) \nadd_edge!(gd, 2, 3) \nadd_edge!(gd, 1, 4) # vertex 1 to vertex 4 \nadd_edge!(gd, 4, 1) # vertex 4 to vertex 1 \n\n@drawsvg begin\n    background(\"grey10\")\n    sethue(\"thistle1\")\n    drawgraph(gd, vertexlabels = [1, 2, 3, 4], edgecurvature=5)\nend 600 300","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"note: Note\nIn this representation of our directed graph gd, we can see the direction of the edges joining the vertices. The edgecurvature keyword has been used to specify a small amount of curvature for each edge. Otherwise, with the default drawing settings, the two edges connecting vertices 1 and 4 would have been drawn overlapping, and difficult to distiguish at a glance. ","category":"page"},{"location":"basics/#Very-simple-graphs","page":"Basic graphs","title":"Very simple graphs","text":"","category":"section"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"Creating graphs by typing the connections manually is tedious, so we can use functions such as the Graph/SimpleGraph and DiGraph/SimpleDiGraph constructor functions:","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"g = Graph(10, 5) # 10 vertices, 5 edges\n\nd1 = @drawsvg begin\n    background(\"grey10\")\n    sethue(\"gold\")\n    drawgraph(g, vertexlabels = vertices(g))\nend 400 300\n\ngd = SimpleDiGraph(5, 3) # 5 vertices, 3, edges\n\nd2 = @drawsvg begin\n    background(\"grey10\")\n    setline(0.5)\n    sethue(\"firebrick\")\n    drawgraph(gd, vertexlabels = vertices(g))\nend 400 300\n\nhcat(d1, d2)","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"Neither of these two graphs is a connected graph. In a connected graph, every vertex is connected to every other via some path, a sequence of edges.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"We can define how many vertices and edges the graph should have. An undirected graph with 10 vertices can have between 0 to 45 (binomial(10, 2)) edges, a directed graph up to 90 edges.","category":"page"},{"location":"basics/#Well-known-graphs","page":"Basic graphs","title":"Well-known graphs","text":"","category":"section"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"Graphs have been studied for a few centuries, so there are many familiar and well-known graphs and types of graph.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"In a complete graph, every vertex is connected to every other vertex.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"N = 10\ng = complete_graph(N)\n@drawsvg begin\n   background(\"grey10\")\n   setline(0.5)\n   sethue(\"pink\")\n   drawgraph(g, vertexlabels = vertices(g))\nend 600 300","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"There's also a complete_digraph() function.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"N = 7\ng = complete_digraph(N)\n@drawsvg begin\n    background(\"grey10\")\n    setline(0.5)\n    sethue(\"orange\")\n    drawgraph(g, vertexlabels = vertices(g), edgecurvature = 2)\nend 600 300","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"In a bi-partite graph, every vertex belongs to one of two groups. Each vertex in the first group is connected to one or more vertices in the second group.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"The next figure shows the complete version of a bi-partite graph. Each vertex is connected to every other vertex in the other group.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"N = 10\ng = complete_bipartite_graph(N, N)\nH = 300\nW = 550\n@drawsvg begin\n    background(\"grey10\")\n    pts = vcat(\n        [between(O + (-W / 2, -H / 2), O + (-W / 2, H / 2), i) for i in range(0, 1, length=N)], # left\n        [between(O + (W / 2, H / 2), O + (W / 2, -H / 2), i) for i in range(0, 1, length=N)] # right\n    )\n    sethue(\"aquamarine\")\n    drawgraph(g, vertexlabels = 1:nv(g), layout = pts, edgestrokeweights=0.5)\nend 600 400","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"Here, we calculated the coordinates of the vertices and passed the resulting pts to the layout keyword.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"A grid graph doesn't need much explanation:","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"M = 4\nN = 5\ng = Graphs.grid([M, N])\n@drawsvg begin\n    background(\"grey10\")\n    setline(0.5)\n    sethue(\"greenyellow\")\n    drawgraph(g, vertexlabels = 1:nv(g), layout=stress)\nend 600 300","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"Star graphs (star_graph(n)) and wheel graphs (wheel_graph(n)) deliver what their names promise.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"g = star_graph(12)\n@drawsvg begin\n    background(\"grey10\")\n    sethue(\"orange\")\n    drawgraph(g, vertexlabels=1:nv(g), layout=stress)\nend 600 300","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"g = wheel_graph(12)\n@drawsvg begin\n    background(\"grey10\")\n    sethue(\"palegreen\")\n    drawgraph(g, vertexlabels=1:nv(g), layout=stress)\nend 600 300","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"There are star_digraph() and wheel_digraph() DiGraph versions too.","category":"page"},{"location":"basics/#Even-more-well-known-graphs","page":"Basic graphs","title":"Even more well-known graphs","text":"","category":"section"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"There are probably as many graphs as there are possible games of chess. In both fields, the more commonly-seen patterns have been studied extensively by enthusiasts for years.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"Many well-known graphs are provided by the smallgraph() function. Supply one of the available symbols, such as :bull, or :house.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"<details closed><summary>Code for this figure</summary>","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"This code generates the figure below.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"using Karnak, Graphs, NetworkLayout\nsmallgraphs = (\n    (:bull, \"bull\"),\n    (:chvatal, \"chvatal\"),\n    (:cubical, \"cubical\"),\n    (:desargues, \"desargues\"),\n    (:diamond, \"diamond\"),\n    (:dodecahedral, \"dodecahedral\"),\n    (:frucht, \"frucht\"),\n    (:heawood, \"heawood\"),\n    (:house, \"house\"),\n    (:housex, \"housex\"),\n    (:icosahedral, \"icosahedral\"),\n    (:karate, \"karate\"),\n    (:krackhardtkite, \"krackhardtkite\"),\n    (:moebiuskantor, \"moebiusantor\"),\n    (:octahedral, \"octahedral\"),\n    (:pappus, \"pappus\"),\n    (:petersen, \"petersen\"),\n    (:sedgewickmaze, \"sedgewick\"),\n    (:tetrahedral, \"tetrahedral\"),\n    (:truncatedcube, \"truncatedcube\"),\n    (:truncatedtetrahedron, \"truncatedtetrahedron\"),\n    (:truncatedtetrahedron_dir, \"truncatedtetrahedron\"),\n    (:tutte, \"tutte\"))\n\ncolors = [\"paleturquoise\", \"chartreuse\", \"thistle1\", \"pink\",\n\"gold\", \"wheat\", \"olivedrab1\", \"palegreen\", \"turquoise1\",\n\"lightgreen\", \"plum1\", \"plum\", \"violet\", \"hotpink\"]\n\nsmallgraphs = @drawsvg begin\n    background(\"grey10\")\n    sethue(\"orange\")\n    ng = length(smallgraphs)\n    N = convert(Int, ceil(sqrt(ng)))\n    tiles = Tiler(800, 800, N, N)\n    setline(0.5)\n    for (pos, n) in tiles\n        @layer begin\n            n > ng && break\n            translate(pos)\n            sethue(colors[mod1(n, end)])\n            bbox = BoundingBox(box(O, tiles.tilewidth, tiles.tileheight))\n            g = smallgraph(first(smallgraphs[n]))\n            drawgraph(g, boundingbox = bbox, vertexshapesizes = 2, layout = stress)\n            sethue(\"cyan\")\n            text(string(last(smallgraphs[n])), halign = :center, boxbottomcenter(bbox))\n        end\n    end\nend 800 800\nnothing # hide","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"</details>","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"smallgraphs # hide","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"It's easy to find out more about these well-known graphs online, such as on the wikipedia. Some of the graphs in this figure would benefit from individual ‘tuning’ of the various layout parameters.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"Here's a larger view of the Petersen graph (named after Danish mathematician Julius Petersen, who first described it in 1898).","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"@drawsvg begin\n    background(\"grey10\")\n    pg = smallgraph(:petersen)\n    sethue(\"orange\")\n    drawgraph(pg, vertexlabels = 1:nv(pg), layout = Shell(nlist=[6:10,]))\nend 600 300","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"Here's a cubical graph:","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"@drawsvg begin\n    background(\"grey10\")\n    g = smallgraph(:cubical)\n    sethue(\"orange\")\n    drawgraph(g, layout = spring)\nend 600 300","category":"page"},{"location":"basics/#Getting-some-information-about-the-graph","page":"Basic graphs","title":"Getting some information about the graph","text":"","category":"section"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"There are lots of functions for obtaining information about a graph.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"How many vertices?","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"julia> pg = smallgraph(:petersen)\njulia> nv(pg)\n10","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"How many edges?","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"julia> ne(pg)\n15","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"Which vertices are connected with vertex 1? - ie what are the neighbors of a particular vertex?","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"julia> neighbors(pg, 1)\n5-element Vector{Int64}:\n 2\n 5\n 6","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"We can iterate over vertices and edges. To step through each vertex, use the vertices iterator function:","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"for e in vertices(pg)\n    println(e)\nend\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"Iterating over edges with the edges iterator function will give a value of type Edge. The src() and dst() functions applied to an edge argument return the numbers of the source and destination vertices respectively.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"for e in edges(pg)\n    println(src(e), \" => \", dst(e))\nend\n\n1 => 2\n1 => 5\n1 => 6\n2 => 3\n2 => 7\n3 => 4\n3 => 8\n4 => 5\n4 => 9\n5 => 10\n6 => 8\n6 => 9\n7 => 9\n7 => 10\n8 => 10","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"To add a vertex:","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"pg1 = smallgraph(:petersen)\nadd_vertex!(pg1) # returns true if successful","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"To add an edge:","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"add_edge!(pg1, 10, 11) # join 10 to 11","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"It's sometimes useful to be able to see these relationships between neighbors visually. This example looks for the neighbors of vertex 10 and draws them in thick red lines:","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"@drawsvg begin\n\nbackground(\"grey10\")\npg = smallgraph(:petersen)\n\nvertexofinterest = 10\n\nE = Int[]\nfor (n, e) in enumerate(edges(pg))\n    if dst(e) == vertexofinterest || src(e) == vertexofinterest\n        push!(E, n)\n    end\nend\n\nedgewts = [dst(e) ∈ E ? 4 : 1 for e in edges(pg)]\n\ndrawgraph(pg,\n    vertexlabels = 1:nv(pg),\n    layout = Shell(nlist=[6:10,]),\n    vertexfillcolors = (v) -> ((v == vertexofinterest) ||\n    v ∈ neighbors(pg, vertexofinterest)) && colorant\"rebeccapurple\",\n    vertexshapesizes = [v == vertexofinterest ? 20 : 10 for v in 1:nv(pg)],\n    edgestrokecolors = (e, f, t, s, d) -> (e ∈ E) ? \n        colorant\"red\" : colorant\"thistle1\",\n    edgestrokeweights = edgewts\n    )\nend 600 300","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"Other useful functions include has_vertex(g, v) and has_edge(g, s, d).","category":"page"},{"location":"basics/#Degree","page":"Basic graphs","title":"Degree","text":"","category":"section"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"The degree of a vertex is the number of edges that meet at that vertex. This is shown in the figure below both in the vertex labels and also color-coded:","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"@drawsvg begin\nbackground(\"grey10\")\nsethue(\"gold\")\ng = smallgraph(:krackhardtkite)\n\ndrawgraph(g, layout=spring,\n    vertexfillcolors = (vtx) -> distinguishable_colors(nv(g), transform=tritanopic)[degree(g, vtx)],\n    vertexshapesizes = 20,\n    margin=40,\n    vertexlabels = (vtx) -> string(degree(g, vtx)),\n    vertexlabelfontsizes = 20,\n    vertexlabeltextcolors = [colorant\"black\", colorant\"white\"]\n    )\nend 600 300","category":"page"},{"location":"basics/#Graphs-as-matrices","page":"Basic graphs","title":"Graphs as matrices","text":"","category":"section"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"Graphs can be represented as matrices - some say that graph theory is really the study of a particular set of matrices... We'll meet the adjacency matrix and the incidence matrix (and there's an array called the adjacency list too).","category":"page"},{"location":"basics/#Adjacency-matrix","page":"Basic graphs","title":"Adjacency matrix","text":"","category":"section"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"A graph G with n vertices can be represented by a square matrix A with n rows and columns. The matrix consists of 1s and 0s. A value of 1 means that there's a connection between two vertices with those indices. For example, if vertex 5 is connected with vertex 4, then A[5, 4] contains 1. The adjacency_matrix() function displays the matrix for a graph:","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"julia> adjacency_matrix(pg)\n10×10 SparseArrays.SparseMatrixCSC{Int64, Int64} with 30 stored entries:\n ⋅  1  ⋅  ⋅  1  1  ⋅  ⋅  ⋅  ⋅\n 1  ⋅  1  ⋅  ⋅  ⋅  1  ⋅  ⋅  ⋅\n ⋅  1  ⋅  1  ⋅  ⋅  ⋅  1  ⋅  ⋅\n ⋅  ⋅  1  ⋅  1  ⋅  ⋅  ⋅  1  ⋅\n 1  ⋅  ⋅  1  ⋅  ⋅  ⋅  ⋅  ⋅  1\n 1  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  1  1  ⋅\n ⋅  1  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  1  1\n ⋅  ⋅  1  ⋅  ⋅  1  ⋅  ⋅  ⋅  1\n ⋅  ⋅  ⋅  1  ⋅  1  1  ⋅  ⋅  ⋅\n ⋅  ⋅  ⋅  ⋅  1  ⋅  1  1  ⋅  ⋅","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"(This one:)","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"@drawsvg begin\nbackground(\"grey10\")\npg = smallgraph(:petersen)\nsethue(\"orange\")\ndrawgraph(pg, vertexlabels = 1:nv(pg), layout = Shell(nlist=[6:10,]))\nend 600 400","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"Notice that this matrix, for a Petersen graph, is symmetrical about the top-left/bottom-right diagonal, because, in an undirected graph, a connection from vertex 4 to vertex 5 is also a connection from vertex 5 to 4. The vertical sum of each column (and the horizontal sum of each row) is the number of edges shared by that vertex,","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"We can provide an adjacency matrix to the graph construction functions to create a graph. For example, this matrix recreates the House graph (aka smallgraph(:house)) from its adjacency matrix:","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"m = [0 1 1 0 0;\n     1 0 0 1 0;\n     1 0 0 1 1;\n     0 1 1 0 1;\n     0 0 1 1 0]\n\n@drawsvg begin\n    background(\"grey10\")\n    hg = Graph(m)\n    sethue(\"palegreen\")\n    drawgraph(hg, vertexlabels=1:nv(hg), layout=stress)\nend 800 400","category":"page"},{"location":"basics/#Incidence-matrix","page":"Basic graphs","title":"Incidence matrix","text":"","category":"section"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"We can also represent a graph G with a matrix M consisting of 1s, -1s, and 0s, where the rows are vertices and the columns are edges. M is called an incidence matrix.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"julia> incidence_matrix(pg)\n10×15 SparseArrays.SparseMatrixCSC{Int64, Int64} with 30 stored entries:\n 1  1  1  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅\n 1  ⋅  ⋅  1  1  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅\n ⋅  ⋅  ⋅  1  ⋅  1  1  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅\n ⋅  ⋅  ⋅  ⋅  ⋅  1  ⋅  1  1  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅\n ⋅  1  ⋅  ⋅  ⋅  ⋅  ⋅  1  ⋅  1  ⋅  ⋅  ⋅  ⋅  ⋅\n ⋅  ⋅  1  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  1  1  ⋅  ⋅  ⋅\n ⋅  ⋅  ⋅  ⋅  1  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  1  1  ⋅\n ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  1  ⋅  ⋅  ⋅  1  ⋅  ⋅  ⋅  1\n ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  1  ⋅  ⋅  1  1  ⋅  ⋅\n ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  1  ⋅  ⋅  ⋅  1  1","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"The first column of this matrix is an edge between vertex 1 and vertex 2, whereas the first column of the adjacency matrix defines the vertices that are connected with vertex 1.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"For a directed graph:","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"julia> dg = DiGraph(3, 3)\n\njulia> incidence_matrix(dg)\n\n3×3 SparseArrays.SparseMatrixCSC{Int64, Int64} with 6 stored entries:\n -1   1   1\n  1  -1   ⋅\n  ⋅   ⋅  -1","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"Here, negative values are used, so 1 and -1 are used to indicate directions. The first column,-1 1 0, specifies that the first edge goes from 2 to 1.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"An incidence matrix is another useful way of quickly defining a graph. That's why we can pass an incidence matrix to the Graph() and DiGraph() functions to create new graphs.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"For example, here's a familiar image:","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"g = [0 1 1;\n     1 0 1;\n     1 1 0]\n\n@drawsvg begin\nbackground(\"grey20\")\ndrawgraph(Graph(g),\n    layout = ngon(O + (0, 20), 80, 3, π/6, vertices=true),\n    vertexshapes = :circle,\n    vertexshapesizes = 40,\n    edgestrokeweights = 15,\n    edgestrokecolors = colorant\"gold\",\n    vertexfillcolors = [colorant\"#CB3C33\",\n        colorant\"#389826\", colorant\"#9558B2\"])\nend 600 250","category":"page"},{"location":"basics/#Adjacency-list","page":"Basic graphs","title":"Adjacency list","text":"","category":"section"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"Another way of representing a graph is by using an array of arrays in the form of an adjacency list. This array has n elements to represent a graph with n vertices. The first element of the array is an array of those vertex numbers that are connected with vertex 1. Element 2 holds the vertex numbers connected with vertex 2,and so on, up to element n.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"For example, this adjacency list:","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"[\n    [2, 5, 7],  # vertex 1 connects with 2, 5, and 7\n    [1, 3, 9],  # vertex 2 connects with 1, 3, and 9\n    [2, 4, 11],\n    [3, 5, 13],\n    [1, 4, 15],\n    [7, 15, 20],\n    [1, 6, 8],\n    [7, 9, 16],\n    [2, 8, 10],\n    [9, 11, 17],\n    [3, 10, 12],\n    [11, 13, 18],\n    [4, 12, 14],\n    [13, 15, 19],\n    [5, 6, 14],\n    [8, 17, 20],\n    [10, 16, 18],\n    [12, 17, 19],\n    [14, 18, 20],\n    [6, 16, 19]\n]","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"defines a graph with 20 vertices. The Graph() function accepts such an adjacency list, preceded by the number of edges.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"g = Graph(30, [\n    [2, 5, 7],\n    [1, 3, 9],\n    [2, 4, 11],\n    [3, 5, 13],\n    [1, 4, 15],\n    [7, 15, 20],\n    [1, 6, 8],\n    [7, 9, 16],\n    [2, 8, 10],\n    [9, 11, 17],\n    [3, 10, 12],\n    [11, 13, 18],\n    [4, 12, 14],\n    [13, 15, 19],\n    [5, 6, 14],\n    [8, 17, 20],\n    [10, 16, 18],\n    [12, 17, 19],\n    [14, 18, 20],\n    [6, 16, 19]])\n\n@drawsvg begin\n    background(\"grey10\")\n    sethue(\"orange\")\n    drawgraph(g, layout=stress)\nend 600 300","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"Graphs.jl uses adjacency lists internally. If we peek inside a graph and look at its fields, we'll see something like this, for a Directed Graph:","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"fieldnames(DiGraph)\n(:ne, :fadjlist, :badjlist)","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"Here, fadjlist is a forward adjacency list which defines how each vertex connects to other vertices, and badjlist is a backward adjacency list which defines how each vertex receives connections from other vertices.","category":"page"},{"location":"basics/#Paths,-cycles,-routes,-and-traversals","page":"Basic graphs","title":"Paths, cycles, routes, and traversals","text":"","category":"section"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"Graphs help us answer questions about connectivity and relationships. For example, think of a railway network as a graph, with the stations as vertices, and the tracks as edges. We want to ask questions such as \"Can we get from A to B by train?\", which therefore becomes the question \"Are there sufficient edges between vertices in the graph such that we can find a continuous path that goes from vertex A to vertex B?\".","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"Graphs.jl has many features for traversing graphs and finding paths. We can look at just a few of them here.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"note: Note\nThe study of graphs uses a lot of terminology, and many of the terms also have informal and familiar meanings. Usually the informal meanings are reasonably accurate and appropriate, but note that the words also have more precise definitions in the literature.","category":"page"},{"location":"basics/#Paths-and-cycles","page":"Basic graphs","title":"Paths and cycles","text":"","category":"section"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"A path is a sequence of edges between some start vertex and some end vertex, such that a continuous unbroken route is available.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"A cycle is a path where the start and end vertices are the same - a closed path. Other vertices in the path occur just once. These are also called circuits in some sources.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"The cycle_basis() function finds all the cycles in a graph (at least, it finds a basis of an undirected graph, which is a minimal collection of cycles that can be added to make all the cycles). The result is an array of arrays of vertex numbers.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"julia> pg = smallgraph(:petersen)\njulia> cycles = cycle_basis(pg)\n6-element Vector{Vector{Int64}}:\n [1, 6, 8, 10, 5]\n [4, 9, 6, 8, 10, 5]\n [7, 9, 6, 8, 10]\n [4, 3, 8, 10, 5]\n [1, 2, 3, 8, 10, 5]\n [7, 2, 3, 8, 10]","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"@drawsvg begin\n    background(\"grey10\")\n    sethue(\"magenta\")\n    pg = smallgraph(:petersen)\n\n    cycles = cycle_basis(pg)\n    table = Table(2, length(cycles) ÷ 2, 220, 160)\n\n    for (n, cycle) in enumerate(cycles)\n        cycleedges = [Edge(cycle[i], cycle[mod1(i + 1, end)]) for i in 1:length(cycle)]\n        @layer begin\n            translate(table[n])\n            bb = BoundingBox(box(O, table.colwidths[1], table.rowheights[1]))\n            sethue(\"grey60\")\n            drawgraph(pg,\n                layout = stress,\n                vertexshapes = :none,\n                boundingbox = bb)\n            sethue(HSB(rescale(n, 1, length(cycles) + 1, 0, 360), 0.8, 0.6))\n            drawgraph(pg,\n                layout = stress,\n                boundingbox = bb,\n                vertexshapes = (v) -> begin\n                    v ∈ cycle && box(O, 12, 12, :fill)\n                end,\n                vertexshapesizes = 30,\n                vertexlabels = (v) -> v ∈ cycle && string(v),\n                edgestrokeweights = 5,\n                edgelist = cycleedges,\n            )\n        end\n    end\nend 600 300","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"For digraphs, you can use simplecycles() to find every cycle.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"This example shows every cycle of a complete digraph {4, 12}.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"\nsdg = complete_digraph(4)\n\ncycles = simplecycles(sdg)\n\n@drawsvg begin\n    background(\"grey10\")\n    sethue(\"orange\")\n    tiles = Tiler(600, 600, 4, 4)\n    for (pos, n) in tiles\n        cycle = cycles[n]\n        cycle_path = [Edge(cycle[i], cycle[mod1(i + 1, end)]) for i in 1:length(cycle)]\n        @layer begin\n            translate(pos)\n            tilebox = BoundingBox(box(O, tiles.tilewidth, tiles.tileheight))\n            text(string(cycle), halign=:center, boxbottomcenter(tilebox))\n            sethue(HSV(rand(0:360), 0.6, 0.9))\n            drawgraph(sdg, layout=squaregrid,\n                boundingbox = tilebox,\n                edgelist = cycle_path,\n                vertexlabels = (v) -> v ∈ cycle ? string(v) : \"\",\n                vertexlabeltextcolors= colorant\"white\",\n                vertexlabeloffsetdistances = 10,\n                vertexlabeloffsetangles = [π, 0],\n                vertexshapes = :none,\n                edgelines = (edgenumber, edgesrc, edgedest, from, to) ->\n                    begin\n                        newpath()\n                        arc2sagitta(from, to, 5, :stroke)\n                    end)\n        end\n    end\nend 600 600","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"There can be a lot of cycles in a graph. For example, a complete_digraph(10) has 1,110,073 cycles. Graphs.jl has tools for working with cycles efficiently.","category":"page"},{"location":"basics/#Visiting-every-vertex-once","page":"Basic graphs","title":"Visiting every vertex once","text":"","category":"section"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"It's useful to know how to visit every vertex just once.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"You can do this for DiGraphs if you can find a cycle that's the same length as the graph. However, there might be a lot of possibilities, since there could be many such cycles. This example uses simplecycles() to find all of them (there are over 400 for this graph), so only the first one with the right length is used.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"@drawsvg begin\nbackground(\"grey10\")\ng = complete_digraph(6)\n\ntour = first(filter(cycle -> length(cycle) == nv(g), simplecycles(g)))\n\nvertexlist_to_edgelist(vlist) = [Edge(p[1] => p[2]) for p in zip(vlist, circshift(vlist, -1))]\n\nsethue(\"grey50\")\n\ndrawgraph(g, layout = spring)\n\nsethue(\"orange\")\ndrawgraph(g, layout = spring,\n    edgelist = vertexlist_to_edgelist(tour),\n    edgestrokeweights = 10,\n    )\nend 800 400","category":"page"},{"location":"basics/#Trees","page":"Basic graphs","title":"Trees","text":"","category":"section"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"A tree is a connected graph with no cycles. A rooted tree is a tree graph in which one vertex has been designated as the root, or origin. Rooted tree graphs can be drawn using the Buchheim layout algorithm (named after the developer, Christoph Buchheim).","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"In the next example, we start with a binary tree, in which each vertex is connected to no more than two others - but we'll add one more vertex so that it's no longer a binary tree. ","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"<details closed><summary>Code for this figure</summary>","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"This code generates the figure below.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"using Karnak, Graphs, NetworkLayout, Colors\n\nd = @drawsvg begin\n    background(\"grey10\")\n    sethue(\"purple\")\n    fontsize(12)\n\n    bt = binary_tree(4)\n    g = SimpleDiGraph(collect(edges(bt)))\n\n    # add another vertex\n    add_vertex!(g)\n    add_edge!(g, 7, 16)\n\n    drawgraph(g,\n        layout=buchheim,\n        margin=20,\n        edgestrokeweights=2,\n        edgegaps=12, \n        vertexlabels = 1:nv(g),\n        vertexshapes=:circle,\n        vertexfillcolors=[RGB(Karnak.Luxor.julia_red...), \n            RGB(Karnak.Luxor.julia_purple...), \n            RGB(Karnak.Luxor.julia_green...), \n            RGB(Karnak.Luxor.julia_blue...)],\n        vertexshapesizes=12,\n        vertexlabeltextcolors=colorant\"white\",\n    )\nend 600 350\nnothing # hide","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"</details>","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"d # hide","category":"page"},{"location":"basics/#Shortest-paths:-the-A*-algorithm","page":"Basic graphs","title":"Shortest paths: the A* algorithm","text":"","category":"section"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"One way to find the shortest path between two vertices is to use the a_star() function, and provide the graph, the start vertex, and the end vertex. The function returns a list of edges.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"(The unusual name of this function is just a reference to the name of the algorithm, A*, first published in 1968 by Peter Hart, Nils Nilsson, and Bertram Raphael.)","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"The function finds the shortest path and returns an array of edges that define the path.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"@drawsvg begin\nbackground(\"grey10\")\nsethue(\"lemonchiffon\")\ng = binary_tree(5)\ndirg = SimpleDiGraph(collect(edges(g)))\nastar = a_star(dirg, 1, 21)\ndrawgraph(dirg, layout=buchheim,\n    vertexlabels = 1:nv(g),\n    vertexshapes = (vtx) -> box(O, 30, 20, :fill),\n    vertexlabelfontsizes = 16,\n    edgegaps=20,\n    edgestrokeweights= 5,\n    edgestrokecolors = (edgenumber, s, d, f, t) -> (s ∈ src.(astar) && d ∈ dst.(astar)) ?\n        colorant\"gold\" : colorant\"grey40\",\n    vertexfillcolors = (vtx) -> (vtx ∈ src.(astar) ||\n        vtx ∈ dst.(astar)) && colorant\"gold\"\n    )\nend 800 400","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"One use for the A* algorithm is for finding paths through mazes. In the next example, a grid graph is subjected to some random vandalism, removing quite a few edges. Then a route through the maze was easily found by a_star().","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"using Random\nRandom.seed!(6)\n\n@drawsvg begin\nbackground(\"grey10\")\n\nW, H = 20, 20\ng = grid((W, H))\n\n# vandalize the grid:\nlet\n    c = 0\n    while c < 200\n        v = rand(1:W*H)\n        rem_edge!(g, v, [v-1, v+1, v-W, v+H][rand(1:end)]) && (c += 1)\n    end\nend\n\n# find a route\nastar = a_star(g, 1, W * H)\n\nsethue(\"grey60\")\nsetlinecap(\"square\")\ndrawgraph(g,\n    vertexshapesizes = 0,\n    layout=squaregrid,\n    edgestrokeweights = 12)\n\nsethue(\"red\")\ndrawgraph(g,\n    vertexshapes = :none,\n    layout=squaregrid,\n    edgelist=astar,\n    edgegaps=0,\n    edgestrokeweights=5)\n\nend 600 600","category":"page"},{"location":"basics/#Shortest-paths:-Dijkstra's-algorithm","page":"Basic graphs","title":"Shortest paths: Dijkstra's algorithm","text":"","category":"section"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"A well-known algorithm for finding the shortest path between graph vertices is named for its creator, Edsger W. Dijkstra. He wrote about his inspiration:","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"\"I designed it in about twenty minutes. One morning I was shopping in Amsterdam with my young fiancée, and tired, we sat down on the café terrace to drink a cup of coffee and I was just thinking about whether I could do this, and I then designed the algorithm for the shortest path.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"In Graphs.jl, this algorithm is available with dijkstra_shortest_paths(). After running this function, the result is an object with various pieces of information about all the shortest paths: this is a DijkstraState object, with fields parents, dists, predecessors, pathcounts, closest_vertices. There's an enumerate_paths() function which can extract the vertex information for a specific path from the DijkstraState object.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"The following code animates the results of examining a grid graph using Dijkstra's algorithm. The shortest paths between the first vertex and every other vertex are drawn in a series of frames, one by one.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"function frame(scene, framenumber, g)\n    framenumber == 1 && return\n\n    # run Dijkstra's algorithm\n\n    ds = dijkstra_shortest_paths(g, 1, allpaths=true, trackvertices=true)\n\n    # for which destination vertex?\n    destv = framenumber\n\n    # get the vertices on the path\n    _, ep = enumerate_paths(ds, [1, destv])\n\n    # convert to edges\n    vlist = [Edge(p[1] => p[2]) for p in zip(ep, circshift(ep, -1))]\n\n    # draw background graph\n    background(\"grey10\")\n    sethue(\"grey40\")\n    drawgraph(g, layout=squaregrid, vertexshapes=:none)\n    path = Point[]\n\n    # draw shortest path\n    drawgraph(g,\n        layout=squaregrid,\n        vertexlabelfontsizes=30,\n        vertexshapes=:none,\n        edgelist = vlist[1:end-1],\n        edgefunction = (n, s, d, f, t) -> begin\n            push!(path, f)\n            push!(path, t)\n        end)\n    sethue(\"orange\")\n    setline(10)\n    setlinejoin(\"bevel\")\n    poly(path, :stroke, close=false)\n    sethue(\"red\")\n    circle.(path[[1, end]], 10, :fill)\nend\n\nfunction main()\n    g = grid((20, 20))\n    amovie = Movie(600, 600, \"dijkstra\")\n    animate(amovie,\n        Scene(amovie, (s, f) -> frame(s, f, g), 1:400),\n        framerate=10)\nend\n\nmain()","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"(Image: animated dijkstra)","category":"page"},{"location":"basics/#Weighted-graphs","page":"Basic graphs","title":"Weighted graphs","text":"","category":"section"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"Up to now, our graphs have been like maps of train or metro networks, focusing on connections, rather than on, say, distances and journey times. Edges have been effectively always one unit long, and shortest path calculations can't take into account the true length of edges. But some systems modelled by graphs require this knowledge, which is where weighted graphs are useful.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"A weighted graph, which can be either undirected or directed, has numeric values assigned to each edge. This value is called the \"weight\" of an edge, and it's usually a positive integer, but can be anything.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"The word \"weight\" is interpreted according to context and the nature of the system modelled by the graph. For example, a higher value for the weight of an edge could mean a longer journey time or more expensive fuel costs, for map-style graphs, but it could signify high attraction levels for a social network graph.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"To use weighted graphs, we must install a separate package, SimpleWeightedGraphs.jl, and load it alongside Graphs.jl.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"To create a new weighted graph:","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"using Graphs, SimpleWeightedGraphs\n\njulia> g = SimpleWeightedGraph()","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"This creates a new, empty, weighted, undirected, graph. Or we can pass an existing graph to this function:","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"julia> wg = SimpleWeightedGraph(Graph(6, 15), 4.0)","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"To get the weights of the edge between two vertices, use get_weight():","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"julia> get_weight(wg, 1, 2)","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"To change the weight of the edge between two vertices, use add_edge():","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"julia> add_edge!(graph, from, to, weight)","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"You can provide a list of weights to the edgelabels keyword, which can accept a vector of edge weights.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"g = SimpleWeightedGraph(3)\nadd_edge!(g, 1, 2, 12)\nadd_edge!(g, 1, 3, 13)\nadd_edge!(g, 2, 3, 23)\n\nedgeweights = [g.weights[e.src, e.dst] for e in edges(g)]\n\n@drawsvg begin\n    background(\"black\")\n    sethue(\"magenta\")\n    fontsize(20)\n    drawgraph(\n        g,\n        vertexshapesizes = 15,\n        vertexlabels = 1:nv(g),\n        edgelabelfontsizes = 40,\n        edgelabels = edgeweights\n    )\nend","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"In the next example, we set the default weight of every edge to 4.0 when the graph is created, and changed just one edge's weight:","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"wg = SimpleWeightedGraph(Graph(6, 15), 4.0)\nadd_edge!(wg, 1, 2, 10_000_000)\n@drawsvg begin\nbackground(\"grey10\")\nsethue(\"gold\")\ndrawgraph(wg, edgecurvature=10,\n    vertexlabels = 1:nv(wg),\n    edgelabels = (k, s, d, f, t) -> begin\n        weight = get_weight(wg, s, d)\n            if weight > 10\n                sethue(\"white\")\n                box(midpoint(f, t), 30, 16, :fill)\n                setcolor(\"magenta\")\n            else\n                sethue(HSB(rescale(k, 1, ne(wg), 0, 360), 0.7, 0.6))\n            end\n            text(string(weight), midpoint(f,t), halign=:center, valign=:middle)\n        end,\n    edgegaps = 10\n    )\nend 600 300","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"A look at the graph's adjacency matrix shows that the weights have replaced the 1s:","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"julia> adjacency_matrix(wg)\n6×6 SparseArrays.SparseMatrixCSC{Float64, Int64} with 30 stored entries:\n  ⋅     1.0e7  4.0  4.0  4.0  4.0\n 1.0e7   ⋅     4.0  4.0  4.0  4.0\n 4.0    4.0     ⋅   4.0  4.0  4.0\n 4.0    4.0    4.0   ⋅   4.0  4.0\n 4.0    4.0    4.0  4.0   ⋅   4.0\n 4.0    4.0    4.0  4.0  4.0   ⋅","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"For a directed graph, each edge can have two weights, one from src to dst, the other from dst to src.","category":"page"},{"location":"basics/#Spanning-trees","page":"Basic graphs","title":"Spanning trees","text":"","category":"section"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"A spanning tree is a set of edges that connect all the vertices of a graph together, without forming any cycles. There are various functions for finding spanning trees in Graphs.jl, including algorithms by Otakar Borůvka (boruvka_mst()), Joseph Kruskal (kruskal_mst()), and Robert Prim (prim_mst()). (Immortality can be attained by inventing a new graph-spanning algorithm.)","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"When used on a weighted graph, these functions find the minimum possible tree - the tree that scores the lowest when the weights of the edges are added up. (Some of these functions can also find the highest-scoring trees.)","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"@drawsvg begin\nbackground(\"grey10\")\n\ng = SimpleWeightedGraph(smallgraph(:octahedral))\n\nfor e in edges(g)\n    add_edge!(g, src(e), dst(e), rand(1:10))\nend\nadd_edge!(g, 1, 4, 200)\n\nsethue(\"grey50\")\ndrawgraph(g, layout=spring, vertexshapesizes = 20, edgestrokeweights = 3,\n    edgelabels = (k, src, dest, f, t) ->\n    (sethue(\"cyan\"); label(string(get_weight(g, src, dest)), :nw, midpoint(f, t))))\n\nmst, weights = boruvka_mst(g)\nsethue(\"gold\")\ndrawgraph(g, vertexshapes = :none, layout=spring, edgelist = mst, edgestrokeweights = 15)\n\nmst = kruskal_mst(g)\nsethue(\"green\")\ndrawgraph(g, layout=spring, vertexshapes = :none, edgelist = mst, edgestrokeweights = 10)\n\nmst = prim_mst(g)\nsethue(\"red\")\ndrawgraph(g, layout=spring, vertexshapes = :none, edgelist = mst, edgestrokeweights = 3)\n\nsethue(\"black\")\ndrawgraph(g, layout=spring, vertexlabels = 1:nv(g), edgelines=:none)\n\nend 600 400","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"Notice how all the spanning trees found have avoided the edge joining 1 and 4, which has a weight of 200.0.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"Next, here's boruka_mst() looking for the maximum spanning tree; Edge(1 => 4) is always included every time the function runs.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"using Karnak, Graphs, NetworkLayout, Colors, SimpleWeightedGraphs\n\n@drawsvg begin\n    background(\"grey10\")\n    tiles = Tiler(600, 600, 2, 2)\n    let\n        g = SimpleWeightedGraph(smallgraph(:octahedral))\n        for (pos, n) in tiles\n            for e in edges(g)\n                add_edge!(g, src(e), dst(e), rand(1:10))\n            end\n            add_edge!(g, 1, 4, 200)\n            @layer begin\n                translate(pos)\n                bb = BoundingBox(box(O, tiles.tilewidth, tiles.tileheight))\n                sethue(\"grey50\")\n                mst, weights = boruvka_mst(g, minimize=false)\n                drawgraph(g,\n                    boundingbox=bb,\n                    layout=spring,\n                    vertexshapesizes=10,\n                    edgestrokeweights=3,\n                    edgelabels=(k, src, dest, f, t) -> begin\n                        sethue(\"orange\")\n                        label(string(get_weight(g, src, dest)), :nw, midpoint(f, t))\n                        end,)\n\n                sethue(\"gold\")\n                drawgraph(g,\n                    boundingbox=bb,\n                    layout=spring,\n                    vertexshapes=:none,\n                    edgelist=mst,\n                    edgestrokeweights=5,)\n\n                drawgraph(\n                    g,\n                    boundingbox=bb,\n                    layout=spring,\n                    vertexlabels=1:nv(g),\n                    vertexshapes=:circle,\n                    vertexshapesizes=7.5,\n                    edgegaps=0,\n                    edgelines=:none,)\n            end\n        end\n    end\nend 600 600","category":"page"},{"location":"basics/#Centrality","page":"Basic graphs","title":"Centrality","text":"","category":"section"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"Centrality is a measure of the importance of vertices in a graph. It might describe the importance of \"influencers\" in social networks, or the importance of certain key positions in a transport network. Graphs.jl offers a number of ways to measure the centrality of vertices in a graph. Refer to the manual's \"Centrality Measures\" section for details.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"Here's betweenness_centrality() applied to the Karate Club network. The vertices are sized and colored using the vector of values returned in bc.","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"@drawsvg begin\nbackground(\"grey10\")\ng = smallgraph(:karate)\nbc = betweenness_centrality(g)\nsethue(\"gold\")\ndrawgraph(g, layout = spring,\n    vertexlabels = string.(round.(100bc, digits = 1)),\n    vertexshapesizes = 15 .+ 30bc,\n    vertexfillcolors = HSB.(rescale.(bc, 0, maximum(bc), 150, 360), 0.7, 0.8),\n    )\nend 800 600","category":"page"},{"location":"basics/#Graph-coloring","page":"Basic graphs","title":"Graph coloring","text":"","category":"section"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"A simple graph coloring is a way of choosing colors for the vertices of a graph so that no adjacent vertices have the same color. The greedy_color() function finds a random graph coloring for a graph. The total number of colors, and an array of integers representing the colors, are returned in fields num_colors and colors (as integers between 1 and n).","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"In the following example, only three colors are needed such that no edge connects vertices with the same color. Colors.jl has a distinguishable_colors() function that finds n colors which look sufficiently different:","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"@drawsvg begin\n    background(\"grey10\")\n    g = smallgraph(:octahedral)\n    gc = greedy_color(g)\n    dcolors = distinguishable_colors(gc.num_colors)\n    sethue(\"gold\")\n    drawgraph(g, layout=stress,\n        vertexfillcolors = dcolors[gc.colors],\n        vertexshapesizes = 30)\nend 800 400","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"Here gc.num_colors is 3. However, a complete graph might require many colors because there are so many connected vertices. For example, gc.num_colors is now 20:","category":"page"},{"location":"basics/","page":"Basic graphs","title":"Basic graphs","text":"@drawsvg begin\n    background(\"grey10\")\n    g = complete_graph(20)\n    gc = greedy_color(g)\n    dcolors = distinguishable_colors(gc.num_colors)\n    sethue(\"grey50\")\n    drawgraph(g, layout=stress,\n        vertexfillcolors = dcolors[gc.colors],\n        vertexshapesizes = 20)\nend 600 300","category":"page"},{"location":"reference/api/","page":"Function reference","title":"Function reference","text":"Modules = [Karnak]\nOrder   = [:macro, :function, :type, :constant, ]","category":"page"},{"location":"reference/api/#Karnak.drawgraph-Tuple{Graphs.AbstractGraph}","page":"Function reference","title":"Karnak.drawgraph","text":"Draw a graph g using coordinates in layout to fit in a Luxor boundingbox (defaulting to the current drawing's extent).\n\nReturns a vector of Points, the location of the graph vertices as drawn.\n\nKeyword arguments\n\nboundingbox::BoundingBox        graph fits inside this BB\nlayout                          Point[] or function\nmargin                          default 30\nedgelist                        draw only these edges\n\nvertexfunction(vtx, coords) ->  draw vertices\nedgefunction(edgenumber, edgesrc, edgedest, from, to) -> draw edges\n\nlayout\n\nthe layout method or coordinates to be used. Examples:\n\nlayout = squaregrid\n\nlayout = shell\n\nlayout = vcat(\n    [between(O + (-W / 2, -H / 2), O + (-W / 2, H / 2), i) for i in range(0, 1, length=N)], # left\n    [between(O + (W / 2, H / 2), O + (W / 2, -H / 2), i) for i in range(0, 1, length=N)] # right\n    )\n\nlayout = stress\n\nlayout = (g) -> spectral(adjacency_matrix(g), dim=2)\n\nlayout = shell ∘ adjacency_matrix\n\nlayout = (g) -> sfdp(g, Ptype=Float64, dim=2, tol=0.05, C=0.4, K=2)\n\nlayout = Shell(nlist=[6:10,]) # inner shell for vertices 6 to 10\n\nlayout = squaregrid\n\nthe_positions = [(pt.x, pt.y) for pt in randompointarray(BoundingBox(), 50)[1:nv(G)]]\nthe_weights = rand(1:20, nv(G), nv(G))\nlayout=Stress(initialpos = the_positions,\n    iterations = 30,\n    weights = the_weights)\n\nlayout = Stress(iterations = 100, weights = M) # M is matrix of weights\n\nlayout = Spring(iterations = 200, initialtemp = 2.5)\n\nRefer to the NetworkLayout.jl documentation for more.\n\nExtended help\n\nAll keywords:\n\n boundingbox                 BoundingBox\n margin                      Number\n layout                      Vector{Point}\n                             function from NetworkLayout.jl\n                             f(g::Graph)\n edgefunction                f(edgenumber::Int, edgesrc::Int, edgedest::Int, from::Point)\n vertexfunction              f(vtx::Int, coordinates::Vector{Point})\n edgearrows                  :none\n                             Boolean - draw end arrow\n                             Vector\n                             f(edgenumber::Int, edgesrc::Int, edgedest::Int, from::Point)\n                             - function overrides edgegaps\n edgecurvature               Float64\n edgedashpatterns            Vector{Vector}[number]\n                             Vector{Number}\n edgegaps                    Vector\n                             Range\n                             Real\n                             f(edgenumber::Int, edgesrc::Int, edgedest::Int, from::Point)\n edgelabelcolors             Vector{Colorant}\n                             Colorant\n edgelabelfontfaces          Vector{Strings}[edgenumber]\n                             String\n                             :none\n edgelabelfontsizes          Vector{Number}\n                             Number\n edgelabelrotations          Vector{angles}\n                             angle::Float64\n                             f(edgenumber, edges, edgedest, from, to)\n edgelabels                  Vector\n                             range\n                             Dict{Int, Int}\n                             f(edgenumber, edgesrc, edgedest, from::Point, to::Point)\n                               - this function must draw the required text\n                             :none\n edgelines                   Vector{Int}\n                             range\n                             Int\n                             f(edgenumber, edgesrc, edgedest, from::Point, to::Point)\n edgelist                    Graphs.EdgeIterator\n edgestrokecolors            Vector{Colorant}[edge::Int]\n                             Colorant\n                             f(edgenumber, edgesrc, edgedest, from::Point, to::Point)\n edgestrokeweights           Vector{Number}[vtx]\n                             range\n                             Real\n                             f(edgenumber, edgesrc, edgedest, from::Point, to::Point)\n vertexfillcolors            Vector{Colorant}\n                             Colorant\n                             :none\n                             f(vtx::Int)\n vertexlabelfontfaces        Vector{Strings}\n                             String\n vertexlabelfontsizes        Vector\n                             range\n                             Real\n                             :none\n                             f(vtx::Int, coord::Point[])\n                              - function must return a numeric value for fontsize\n vertexlabeloffsetangles     Vector\n                             Range\n                             Real\n vertexlabeloffsetdistances  Vector\n                             range\n                             Real\n vertexlabelrotations        Vector\n                             range\n                             Real\n                             :none\n vertexlabels                Vector{String}\n                             String\n                             range[vtx::Int]\n                             :none\n                             f(vtx::Int)\n                             - this function must return a string\n vertexlabeltextcolors       Vector{Colorant}\n                             Colorant\n                             f(vtx::Int)\n                             :none\n vertexshaperotations        f(vtx::Int)\n                             angle::Float64\n vertexshapes                Vector of :circle :square :none\n                             range[vtx]\n                             :circle :square :none\n                             f(vtx::Int)\n vertexshapesizes            Vector{Real}\n                             range\n                             Real\n                             :none\n                             f(vtx::Int)\n vertexstrokecolors          Vector\n                             Colorant\n                             :none\n                             f(vtx::Int)\n vertexstrokeweights         Vector\n                             range\n                             :none\n                             f(vtx::Int)\n\n\n\n\n\n","category":"method"},{"location":"reference/functionindex/#Index","page":"Alphabetical function list","title":"Index","text":"","category":"section"},{"location":"reference/functionindex/","page":"Alphabetical function list","title":"Alphabetical function list","text":"","category":"page"},{"location":"#Introduction-to-Karnak","page":"Introduction to Karnak","title":"Introduction to Karnak","text":"","category":"section"},{"location":"","page":"Introduction to Karnak","title":"Introduction to Karnak","text":"(Image: karnak splash image)","category":"page"},{"location":"","page":"Introduction to Karnak","title":"Introduction to Karnak","text":"Karnak.jl is a package for drawing graphs and networks. It's built on top of Luxor.jl.","category":"page"},{"location":"","page":"Introduction to Karnak","title":"Introduction to Karnak","text":"Karnak also uses Graphs.jl for graph construction, and NetworkLayout.jl for graph layout algorithms.","category":"page"},{"location":"","page":"Introduction to Karnak","title":"Introduction to Karnak","text":"note: Note\nThere's a good selection of Julia packages for visualizing graphs:TikzGraphs.jl: backend: Tikz/LaTeX\nGraphPlot.jl: backend: Compose.jl\nSGtSNEpi.jl: backend: Makie.jl\nGraphRecipes.jl: backend: Plots.jl\nGraphMakie.jl: backend: Makie.jl","category":"page"},{"location":"#Quick-start","page":"Introduction to Karnak","title":"Quick start","text":"","category":"section"},{"location":"","page":"Introduction to Karnak","title":"Introduction to Karnak","text":"using Karnak\nusing Graphs\ng = barabasi_albert(100, 1)\n@drawsvg begin\n    background(\"black\")\n    sethue(\"white\")\n    drawgraph(g, layout=stress, vertexlabels = 1:nv(g))\nend","category":"page"},{"location":"","page":"Introduction to Karnak","title":"Introduction to Karnak","text":"note: Note\nKarnak.jl contains just one function: drawgraph(), and re-exports Luxor.jl. So all graphics and drawing functions are from Luxor. See the documentation of Luxor.jl for details.","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"using Karnak, Graphs, NetworkLayout, Colors, SimpleWeightedGraphs","category":"page"},{"location":"syntax/#Syntax","page":"Syntax","title":"Syntax","text":"","category":"section"},{"location":"syntax/#Overview","page":"Syntax","title":"Overview","text":"","category":"section"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"Karnak's function for drawing graphs is drawgraph(). This takes a single argument, a Graph, and tries to place representative graphics on the current Luxor drawing.","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"The default display for graphs is:","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"current Luxor origin, scale and rotation\ncurrent Luxor color for edges\ncircles for all vertex shapes\nno vertex labels\nall edges drawn","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"@drawsvg begin\n    background(\"grey10\")\n    sethue(\"darkcyan\")\n    g = complete_graph(10)\n    drawgraph(g)\nend 600 300","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"To control the appearance of the graph, you supply values to the various keyword arguments. Apart from the general keywords BoundingBox, layout, and margin, the keywords can be grouped into two categories:","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"(Image: two groups of keyword)","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"Most of these keyword arguments accept vectors, ranges, and scalar values, and some accept functions as well.","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"Here's a contrived (and consequently hideously ugly) example of the type of syntax available:","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"@drawsvg begin\nbackground(\"grey10\")\nsethue(\"purple\")\ng = smallgraph(:karate)\ndrawgraph(g, layout=stress,\n    vertexshapes = [:square, :circle],\n    vertexfillcolors = (v) -> v ∈ (1, 3, 6) ? colorant\"red\" : colorant\"grey40\",\n    vertexstrokecolors = colorant\"orange\",\n    vertexstrokeweights = range(0.5, 4, length=nv(g)),\n    vertexshapesizes = 2 .* [Graphs.outdegree(g, v) for v in Graphs.vertices(g)],\n    vertexlabelfontsizes = 2 .* [Graphs.outdegree(g, v) for v in Graphs.vertices(g)],\n    vertexlabels = 1:nv(g),\n    vertexlabelrotations = π/8,\n    vertexlabeltextcolors = distinguishable_colors(10)\n)\nend 600 300","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"Here, the outdegree for each vertex (the number of edges leaving it) is used to control the size of the vertices and the font sizes too. vertexshapes flip-flops between squares and circles for each vertex shape, but the size of the shape is determined by a vertexshapesizes function, which receives a Vector of sizes, the outdegree values for each vertex. The font sizes of the labels are also set this way. A vertexfillcolors function lets you determine the shape's fill color for specific vertices, whereas the stroke color is always orange, with stroke weights gradually increasing. The colors of the labels are set by the Colors.distinguishable_colors() function passed to vertexlabeltextcolors. And all the labels are rotated, for no particularly good reason.","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"Usually, if a vector runs out before the vertices and edges have been drawn, some mod1 magic means the values repeat from the beginning again.","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"Use drawgraph() more than once, if needed, to build up the graph in layers. Remember to use the same layout algorithm.","category":"page"},{"location":"syntax/#Summary-of-keywords","page":"Syntax","title":"Summary of keywords","text":"","category":"section"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"  \nboundingbox BoundingBox drawing will fit inside this bounding box\nmargin Number margin in points/pixels\nlayout Vector{Point} list of coordinates of each vertex\n function from NetworkLayout.jl squaregrid, shell, stress, etc\n f(g::Graph) (g) -> spectral(adjacency_matrix(g), dim=2)\nedgefunction f(edgenumber::Int, edgesrc::Int, edgedest::Int, from::Point, to::Point) function that completely specifies the appearance of every edge. If present, none of the other edge- keyword arguments are used.\nvertexfunction f(vtx::Int, coordinates::Vector{Point}) function that completely specifies the appearance of every vertex. If present, None of the other vertex- keyword arguments will be used.\nedgecurvature Float64 curviness of edge arrows\nedgearrows Boolean draw destination arrows for directed graphs only\n Vector{Boolean} \n f(edgenumber, edgesrc, edgedest, from::Point, to::Point) function to draw arrows for directed graphs only\nedgedashpatterns Vector{Vector}[number] vector of dash patterns\n Vector{Number} a dash pattern\nedgegaps Vector gaps from each vertex center to arrow tip\n Range \n Real gaps from every vertex center to arrow tip\n f(edgenumber, edgesrc, edgedest, from::Point, to::Point) gaps from every vertex center to arrow tip\nedgelabelcolors Vector{Colorant} colors of each vertex's label text\n Colorant color of all vertex labels\nedgelabelfontfaces Vector{Strings}[edgenumber] font face for each edge\n String font face for every edge\n :none \nedgelabelfontsizes Vector{Number} the font size of each edge label\n Number the font size of every edge label\nedgelabelrotations Vector{angles} rotation of each label\n angle::Float64 rotation of every label\n f(edgenumber, edges, edgedest, from, to) function returns angle for this edge\nedgelabels Vector \n range \n Dict{Int, Int} (src, dst) => \"labeltext\"\n f(edgenumber, edgesrc, edgedest, from::Point, to::Point) \n :none \nedgelines Vector{Int} numbers of edges to be drawn\n range \n Int \n f(edgenumber, edgesrc, edgedest, from::Point, to::Point) \nedgelist Graphs.EdgeIterator the edges to be drawn - takes prioity over edgelines\nedgestrokecolors Vector{Colorant}[edge::Int] colors for edges\n Colorant color for every edge\n f(edgenumber, edgesrc, edgedest, from::Point, to::Point) function to set color for this edge\nedgestrokeweights Vector{Number}[vtx] \n range \n Real \n f(edgenumber, edgesrc, edgedest, from::Point, to::Point) function that returns a value for line width\nvertexfillcolors Vector{Colorant} \n Colorant \n :none \n f(vtx::Int) \nvertexlabelfontfaces Vector{Strings} font face for each vertex\n String font face for every vertex\nvertexlabelfontsizes Vector \n range \n Real \n :none \n f(vtx::Int, coords::Point[]) function returns the fontsize for this label\nvertexlabeloffsetangles Vector \n Range \n Real \nvertexlabeloffsetdistances Vector \n range \n Real \nvertexlabelrotations Vector \n range \n Real \n :none \nvertexlabels Vector{String} cycles\n String used for all vertices\n range[vtx::Int] string of the number in the range, cycles\n :none \n f(vtx::Int) function returns a string for the vertex label\nvertexlabeltextcolors Vector{Colorant} color for each text label\n Colorant color of all text labels\n :none \n f(vtx::Int) function returning a colorant\nvertexshaperotations f(vtx::Int) \n angle::Float64 \nvertexshapes Vector of :circle :square :none shapes of each vertex\n range[vtx] draw default shape at this vertex\n :circle :square :none shape of every vertex\n f(vtx::Int) function draws shape at this vertex (which is Point(0, 0))\nvertexshapesizes Vector{Real} \n range \n Real \n :none \n f(vtx::Int) \nvertexstrokecolors Vector \n Colorant \n :none \n f(vtx::Int) \nvertexstrokeweights Vector \n range \n :none ","category":"page"},{"location":"syntax/#The-BoundingBox","page":"Syntax","title":"The BoundingBox","text":"","category":"section"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"The graphics for the graph are placed to fit inside the current BoundingBox (by default, the drawing), after allowing for the margin (the default is 30). Pass a different BoundingBox to the boundingbox keyword argument to control the graph layout's size.","category":"page"},{"location":"syntax/#Layout-algorithms","page":"Syntax","title":"Layout algorithms","text":"","category":"section"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"The only clever part of this package is provided by NetworkLayout.jl), which is where you should look for information about the various algorithms that determine where vertices are positioned.","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"You can choose a layout algorithm, or supply the vertex positions yourself.","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"The main layout algorithms available are:","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"shell\nspring\nstress\nsquaregrid","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"Here are some formulations which work as keywords in drawgraph():","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"layout = squaregrid\n\nlayout = shell\n\nlayout = stress\n\nlayout = spectral\n\nlayout = (g) -> spectral(adjacency_matrix(g), dim=2)\n\nlayout = shell ∘ adjacency_matrix\n\nlayout = (g) -> sfdp(g, Ptype=Float64, dim=2, tol=0.05, C=0.4, K=2)\n\nlayout = Shell(nlist=[6:10,])\n\nlayout = Stress(iterations = 100, weights = M) # M is matrix of weights\n\nlayout = Spring(iterations = 200, initialtemp = 2.5)","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"Alternatively, you can pass a vector of points to the layout keyword argument. Vertices will be placed on these points (vertex 1 on point 1, etc...), rather than at points suggested by the NetworkLayout algorithms. For example, in this next drawing, the two sets of points for a bipartite graph are generated beforehand.","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"@drawsvg begin\nbackground(\"grey10\")\nN = 12; H = 250; W = 550\ng = complete_bipartite_graph(N, N)\npts = vcat(\n    [between(O + (-W / 2, -H / 2), O + (-W / 2, H / 2), i) for i in range(0, 1, length=N)], # left\n    [between(O + (W / 2, H / 2), O + (W / 2, -H / 2), i) for i in range(0, 1, length=N)] # right\n    )\ncircle.(pts, 1, :fill)\ndrawgraph(g, vertexlabels = 1:nv(g), layout = pts,\n    edgestrokeweights = 0.5,\n    edgestrokecolors = (n, f, t, s, d) -> HSB(rescale(n, 1, ne(g), 0, 360), 0.6, 0.9))\nend 600 300","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"The calculated positions are returned by the drawgraph() function.","category":"page"},{"location":"syntax/#Initial-positions-for-the-layout-algorithms","page":"Syntax","title":"Initial positions for the layout algorithms","text":"","category":"section"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"Some of the layout algorithms - the Spring and Stress ones, for example -  allow you to pass initial vertex positions to be used by the algorithms as starting points. The algorithm will continually adjust them to make a better result. These initial positions should be supplied as xy pairs, rather than Points (which NetworkLayout doesn't know about).","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"Here's an animation showing how the Stress algorithm gradually improves the layout on each iteration. The initial positions are just the \"grid locations\" of a Tiler iterator.","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"using Karnak, Graphs, NetworkLayout, Colors\n\nfunction frame(scene, framenumber, G)\n\n    background(\"black\")\n    initialpositions = [(pt.x, pt.y) for (pt, n) in Tiler(600, 600, 3, 3)]\n\n    sethue(\"grey50\")\n    circle.(Point.(initialpositions), 3, :fill)\n\n    for i in 1:framenumber\n        setopacity(rescale(i, 1, scene.framerange.stop, 0, 0.6))\n        drawgraph(G,\n            layout=Stress(initialpos=initialpositions, iterations=i),\n            vertexfillcolors=(i == framenumber) ? colorant\"gold\" : :none\n        )\n    end\n\nend\n\nfunction main()\n    G = smallgraph(:petersen)\n    amovie = Movie(600, 600, \"layout\")\n    animate(amovie,\n        Scene(amovie, (s, f) -> frame(s, f, G), 1:60),\n        framerate=10, creategif=true)\nend\n\nmain()","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"(Image: animate stress algorithm)","category":"page"},{"location":"syntax/#The-vertexfunction-and-edgefunction-arguments","page":"Syntax","title":"The vertexfunction and edgefunction arguments","text":"","category":"section"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"The two keyword arguments vertexfunction and edgefunction allow you to pass control over the drawing process completely to these two functions.","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"warning: Warning\nIf you specify these keywords, all the other vertex/edge keywords are ignored.","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"vertexfunction = my_vertexfunction(vertex, coordinates)\nedgefunction = my_edgefunction(edgenumber, edgesrc, edgedest, from::Point, to::Point)","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"These allow you to draw graphics for the vertex vertex at the point coordinates[vertex], and to draw graphics for each edge edgenumber joining from from to to.","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"The arguments passed to a vertexfunction keyword are the current vertex number and an array of all vertex coordinates.","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"g = wheel_graph(30)\n@drawsvg begin\n    background(\"grey10\")\n    sethue(\"gold\")\n    drawgraph(g,\n        edgelines = [],\n        vertexfunction=(v, c) -> begin\n            @layer begin\n                sethue(HSB(rescale(v, 1, nv(g), 0, 360), 0.7, 0.8))\n                translate(c[v])\n                circle(O, 5, :fill)\n            end\n        end,\n    )\nend 800 200","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"The graphics can be any arbitrary Luxor graphics functions. In the following picture, the vertex positions were passed to a function that placed clipped PNG images on the drawing (using readpng() and placeimage()), and the edges were drawn using sine curves. Refer to the Luxor.jl documentation for more about putting colored things on drawings.","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"(Image: image vertices)","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"It's also possible, for example, to draw another graph at each vertex point (ie recursive graph drawing) if you use vertexfunction.","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"g = complete_graph(5)\n\nfunction rgraph(g, l=1)\n    if l > 4\n        return\n    else\n        drawgraph(g,\n            layout=stress,\n            boundingbox=BoundingBox() / 2l,\n            vertexfunction=(v, c) -> begin\n                @layer begin\n                    sethue(HSB(rescale(v, 1, 4, 0, 360), 0.7, 0.8))\n                    translate(c[v])\n                    #circle(c[v], 5, :fill)\n                    rgraph(g, l + 1)\n                end\n            end,\n            )\n    end\nend\n\n@drawsvg begin\n    background(\"grey10\")\n    sethue(\"gold\")\n    rgraph(g)\nend 800 600","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"The arguments passed to a edgefunction keyword are the edge number, source vertex number, destination vertex number, from coordinate, and to coordinate. ","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"fstroke(x, θ) = begin\n    0.5 + 20sin(x * π)\nend\ng = complete_graph(4)\n@drawsvg begin\n    background(\"grey10\")\n    sethue(\"gold\")\n    border = box(BoundingBox())\n    drawgraph(g,\n        vertexshapes=:none,\n        edgefunction=(n, s, d, f, t) -> begin\n            sethue(HSL(60n, 0.9, 0.6))\n            poly(offsetpoly(\n                    polysample([f, t], include_first=true, closed=false, 30),\n                    fstroke), :fill)\n        end,\n    )\nend 800 400","category":"page"},{"location":"syntax/#Functions-as-keyword-arguments","page":"Syntax","title":"Functions as keyword arguments","text":"","category":"section"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"The following keyword arguments accept functions:","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"edgelabelrotations\nedgelabels\nedgelines\nedgestrokecolors\nedgestrokeweights\nvertexfillcolors\nvertexlabels\nvertexlabeltextcolors\nvertexshaperotations\nvertexshapes\nvertexshapesizes\nvertexstrokecolors\nvertexstrokeweights","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"The edge- keywords accept functions with arguments (edgenumber, sourcevertex, destinationvertex, frompoint, topoint). The vertex- keywords accept functions with arguments (vertex).","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"These functions aren't used if you supply functions to vertexfunction or edgefunction.","category":"page"},{"location":"syntax/#Vertex-labels-and-shapes","page":"Syntax","title":"Vertex labels and shapes","text":"","category":"section"},{"location":"syntax/#vertexlabels","page":"Syntax","title":"vertexlabels","text":"","category":"section"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"Use vertexlabels to choose the text to associate with each vertex. Supply a range, array of strings or numbers, a single string, or a function.","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"This example draws all vertices, and numbers them from 1 to 6.","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"note: Note\nIn Graphs.jl, vertices are always numbered from 1 to n. If you remove a vertex, vertices are effectively re-numbered.","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"@drawsvg begin\n    background(\"grey10\")\n    g = smallgraph(:octahedral)\n    sethue(\"gold\")\n    drawgraph(g, layout=stress,\n        vertexlabels = 1:nv(g),\n        vertexshapesizes = 10)\nend 600 300","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"A function can be passed to vertexlabels to display a vertex; it should accept a single numerical argument, the vertex number, and return a string to display. Labelling all of them isn't always necessary.","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"@drawsvg begin\nbackground(\"grey10\")\ng = smallgraph(:octahedral)\nsethue(\"skyblue\")\ndrawgraph(g, layout=stress,\n    vertexlabels = (v) -> v ∈ (1, 4, 6) && string(v, \"/6\"),\n    vertexshapesizes = 15,\n    vertexlabelfontsizes = 20,\n    )\nend 600 300","category":"page"},{"location":"syntax/#Using-LaTex-in-labels","page":"Syntax","title":"Using LaTex in labels","text":"","category":"section"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"If you want to use LaTeX in vertex labels, you can load MathTeXEngine.jl to parse the LaTeXStrings. Make sure the fonts in the MathTexEngine package are also available to the Operating System's font routines (so copying them to your local font folder is probably required).","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"using Karnak, Graphs, NetworkLayout, Colors\nusing MathTeXEngine, LaTeXStrings\n\ng = complete_graph(4)\n@svg begin\n    background(\"grey10\")\n    sethue(\"cyan\")\n    fontsize(40)\n    drawgraph(g,\n        margin=30,\n        vertexlabels = [L\"v_%$(x)\" for x in 1:nv(g)],\n        vertexlabeloffsetdistances = [40, 40, -40, 40],\n        vertexlabeltextcolors = colorant\"white\"\n    )\nend 600 300","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"(Image: latex tet)","category":"page"},{"location":"syntax/#vertexshapes-and-vertexshapesizes","page":"Syntax","title":"vertexshapes and vertexshapesizes","text":"","category":"section"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"The default shape for a vertex is a filled circle.","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"Options for vertexshapes are :circle and :square. With just two in a vector, they will be used alternately.","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"@drawsvg begin\nbackground(\"grey10\")\ng = smallgraph(:moebiuskantor)\nsethue(\"gold\")\ndrawgraph(g, layout=shell, vertexshapes = [:square, :circle])\nend 600 300","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"vertexshapesizes can set the sizes for the built-in vertex shapes.","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"@drawsvg begin\nbackground(\"grey10\")\ng = smallgraph(:moebiuskantor)\nsethue(\"gold\")\ndrawgraph(g, layout=shell,\n    vertexshapes = [:square, :circle],\n    vertexshapesizes = [15, 5])\nend 600 300","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"@drawsvg begin\nbackground(\"grey10\")\ng = smallgraph(:moebiuskantor)\nsethue(\"gold\")\ndrawgraph(g, layout=shell,\n    vertexshapesizes = (v) -> rescale(v, 1, nv(g), 5, 25))\nend 600 300","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"vertexshaperotations can set the rotations.","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"@drawsvg begin\nbackground(\"grey10\")\ng = smallgraph(:moebiuskantor)\nsethue(\"gold\")\ndrawgraph(g, layout=shell,\n    vertexshapes = :square,\n    vertexshapesizes = [10, 20, 5],\n    vertexshaperotations = [π/2, π/3],\n    )\nend 600 300","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"To show every other vertex and label, you could use something like this:","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"@drawsvg begin\nbackground(\"grey10\")\ng = smallgraph(:truncatedcube)\nsethue(\"darkturquoise\")\ndrawgraph(g, layout=stress,\n    vertexlabels = [\"1\", \"\"],\n    vertexshapesizes = [10, 0])\nend 600 300","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"When circles and squares don't cut it, supply a function to vertexshapes. The single argument is the vertex number; any graphics you draw will be centered at the vertex location, the current origin, Point(0, 0).","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"@drawsvg begin\nbackground(\"grey10\")\ng = smallgraph(:moebiuskantor)\nsethue(\"hotpink\")\ndrawgraph(g, layout=shell,\n    vertexshapes = (v) -> star(O, 15, v+2, 0.5, 0, :fill))\nend 600 300","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"Here, the vertex number is hinted at by the number of points on each star.","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"In the next example, the sizes of the labels and shapes are determined by the degree of each vertex, supplied in a vector.","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"@drawsvg begin\nbackground(\"grey10\")\ng = smallgraph(:karate)\nsethue(\"slateblue\")\ndrawgraph(g, layout=stress,\n    vertexlabels = 1:nv(g),\n    vertexlabelfontsizes = [Graphs.outdegree(g, v) for v in Graphs.vertices(g)],\n    vertexshapesizes = [Graphs.outdegree(g, v) for v in Graphs.vertices(g)],\n    vertexfillcolors = (v) -> v ∈ (1, 3, 6) && colorant\"red\",\n    )\nend 600 300","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"One more example with vertexshapes.","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"function whiten(col::Color, f=0.5)\n    hsl = convert(HSL, col)\n    h, s, l = hsl.h, hsl.s, hsl.l\n    return convert(RGB, HSL(h, s, f))\nend\n\nfunction drawball(pos, ballradius, col::Color;\n        fromlum=0.2,\n        tolum=1.0)\n    gsave()\n    translate(pos)\n    for i in ballradius:-0.25:1\n        sethue(whiten(col, rescale(i, ballradius, 0.5, fromlum, tolum)))\n        offset = rescale(i, ballradius, 0.5, 0, -ballradius/2)\n        circle(O + (offset, offset), i, :fill)\n    end\n    grestore()\nend\n\n@drawsvg begin\nbackground(\"grey10\")\ng = clique_graph(5, 6)\nsethue(\"yellow\")\nsetline(0.2)\ndrawgraph(g,\n    layout = stress,\n    vertexshapes = (v) -> drawball(O, 25, RGB([Karnak.Luxor.julia_red,Karnak.Luxor.julia_purple, Karnak.Luxor.julia_green][rand(1:end)]...))\n)\nend 600 600","category":"page"},{"location":"syntax/#vertexstrokecolors-and-vertexfillcolors","page":"Syntax","title":"vertexstrokecolors and vertexfillcolors","text":"","category":"section"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"These keywords accept a Colors.jl colorant, an array of them, or a function that generates a color.","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"@drawsvg begin\nbackground(\"grey10\")\ng = smallgraph(:cubical)\nsethue(\"darkorange\")\ndrawgraph(g, layout=stress,\n    vertexshapes = :square,\n    vertexshapesizes =  20,\n    vertexfillcolors = [colorant\"red\", colorant\"blue\"],\n    vertexstrokecolors = [colorant\"blue\", colorant\"red\"])\nend 600 300","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"The function should return a Colorant for a vertex:","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"@drawsvg begin\nbackground(\"grey10\")\ng = smallgraph(:icosahedral)\nsethue(\"darkorange\")\ndrawgraph(g, layout=spring,\n    vertexshapes = :circle,\n    vertexshapesizes =  20,\n    vertexstrokeweights = 5,\n    vertexstrokecolors = (v) -> HSB(rescale(v, 1, nv(g), 360, 0), 1, 1),\n    vertexfillcolors = (v)   -> HSB(rescale(v, 1, nv(g), 0, 359), 1, 1),\n    )\nend 600 300","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"or an array of colors:","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"@drawsvg begin\nbackground(\"grey10\")\nsethue(\"orange\")\ng = grid((15, 15))\ndrawgraph(g,\n    layout = squaregrid,\n    vertexshapesizes = 15,\n    vertexfillcolors = [RGB([Karnak.Luxor.julia_red, Luxor.julia_green,\n        Luxor.julia_purple][rand(1:end)]...) for i in 1:nv(g)])\nend 600 600","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"The following keyword arguments operate in a similar way:","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"vertexstrokeweights : Array | Range | :none\nvertexlabeltextcolors : Array | Range | colorant\nvertexlabelfontsizes : Array | Range | number\nvertexlabelfontfaces : Array  | string\nvertexlabelrotations : Array | Range | number\nvertexlabeloffsetangles : Array | Range | number\nvertexlabeloffsetdistances : Array | Range | number","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"It's possible to specify the font faces for vertex labels, but it's difficult to demonstrate when the documentation is built on machines in the cloud with unknown typographical resources. But anyway:","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"@drawsvg begin\nbackground(\"grey10\")\ng = smallgraph(:pappus)\nsethue(\"slateblue\")\ndrawgraph(g,\n    vertexlabels = 1:nv(g),\n    vertexshapes = 0,\n    vertexlabelfontfaces = [\"Times-Roman\", \"Courier\", \"Helvetica-Bold\"],\n    vertexlabelfontsizes = 30)\nend 600 300","category":"page"},{"location":"syntax/#Edge-options","page":"Syntax","title":"Edge options","text":"","category":"section"},{"location":"syntax/#edgefunction","page":"Syntax","title":"edgefunction","text":"","category":"section"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"As with vertexfunction, the edgefunction keyword argument allows you to do anything you like when the edges are drawn, and overrides all other edge- keyword arguments. Here, the calculated coordinates of the graph and a path between two vertices aren't drawn at first, just extracted into vectors for further processing.","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"@drawsvg begin\nbackground(\"black\")\nsethue(\"white\")\ng = clique_graph(16, 4)\n\nA = Point[]\nB = Point[]\n\ndrawgraph(g, layout=stress,\n    edgefunction = (edgenumber, edgesrc, edgedest, from, to) -> begin\n        push!(A, from),\n        push!(A, to)\n        end,\n    vertexshapes = :none,\n    )\n\nroute = a_star(g, 6, 29)\n\ndrawgraph(g, layout=stress,\n    edgelist = route,\n    vertexshapes = :none,\n    edgefunction = (edgenumber, edgesrc, edgedest, from, to) -> begin\n        push!(B, from),\n        push!(B, to)\n        end)\n\nsetlinejoin(\"bevel\")\nsetline(0.25)\n\nsethue(\"grey60\")\n@layer begin\n    poly(A, :stroke)\nend\n\nsethue(\"gold\")\nsetline(4)\n@layer begin\n    poly(B, :stroke)\nend\ncircle.(B[[begin, end]], 5, :fill)\nend 600 400","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"note: Note\nThis keyword overrides the other edge- keywords.","category":"page"},{"location":"syntax/#edgelist-and-edgelines","page":"Syntax","title":"edgelist and edgelines","text":"","category":"section"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"A Graphs.EdgeIterator supplied to edgelist makes only the specified edges available for drawing. Otherwise, control which edges are to be drawn by supplying numbers (or a function) to edgelines.","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"@drawsvg begin\nbackground(\"grey10\")\nsethue(\"orange\")\ng = grid((15, 15))\ndrawgraph(g,\n    layout = stress,\n    vertexshapes = :none,\n    edgelines = rand(1:ne(g), 30)\n)\nend 600 300","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"edgelist is useful for drawing paths - a sequence of edges. For example, if you use a_star() to find the shortest path between two vertices, you can draw the edges with this keyword. It's useful to draw the graph twice, once with all edges, once with selected edges.","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"@drawsvg begin\nbackground(\"grey10\")\ng = grid((15, 15))\n\nastar = a_star(g, 1, nv(g))\n\nsethue(\"orange\")\ndrawgraph(g,\n    layout = stress,\n    vertexshapes = :none)\n\nsethue(\"cyan\")\ndrawgraph(g,\n    layout = stress,\n    vertexshapes = :none,\n    edgestrokeweights = 5,\n    edgelist = astar)\nend 600 300","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"For more interesting edges, you can use Luxor arrows, and you can also define functions to create all kinds of graphical detail:","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"gd = DiGraph() \nadd_vertices!(gd, 4) \nadd_edge!(gd, 1, 2) \nadd_edge!(gd, 1, 3) \nadd_edge!(gd, 2, 3) \nadd_edge!(gd, 1, 4) # vertex 1 to vertex 4 \nadd_edge!(gd, 4, 1) # vertex 4 to vertex 1 \n\n@drawsvg begin \n    background(\"grey10\") \n    sethue(\"thistle1\") \n    drawgraph(gd, vertexlabels = [1, 2, 3, 4],  \n        edgefunction = (n, s, d, f, t) -> begin \n            arrow(f, t, [10, 10],  \n            decoration = 0.75, \n            decorate = () -> begin \n                sethue(HSB(60n, 0.7, 0.8)) \n                ngon(O, 10, 3, 0, :fill)  \n            end, \n            arrowheadfunction= (f, t, a) -> () \n            )    \n        end \n    ) \nend 600 300 ","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"@drawsvg begin\nbackground(\"grey10\")\ng = star_graph(12)\nfontsize(20)\nsethue(\"slateblue\")\ndrawgraph(g,\n    layout=spring,\n    vertexshapes = 0,\n    vertexlabels = 1:nv(g),\n    vertexlabelfontsizes = 12,\n    edgestrokecolors = distinguishable_colors(ne(g)),\n    edgelines = (k, s, d, f, t) ->\n        arrow(f, between(f, t, .95), [20, -45],\n            linewidth = 5,\n            arrowheadlength = 15,\n            arrowheadangle = π/7,\n            decorate = () -> begin\n                    sethue(\"purple\")\n                    circle(O, 15, :fill)\n                    sethue(\"white\")\n                    text(string(k), angle = -getrotation(), halign = :center, valign=:middle)\n                end,\n            decoration = .7))\nend 600 400","category":"page"},{"location":"syntax/#Edge-labels","page":"Syntax","title":"Edge labels","text":"","category":"section"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"Use edgelabels, edgelabelcolors, edgelabelrotations, etc. to control the appearance of the labels alongside edges.","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"@drawsvg begin\nbackground(\"grey10\")\ng = smallgraph(:dodecahedral)\ng = complete_graph(5)\nsethue(\"orange\")\nfontsize(20)\ndrawgraph(g, layout=stress,\n    vertexshapes = :none,\n    vertexlabels = \"vertex\",\n    vertexlabeltextcolors = colorant\"cyan\",\n    edgelabels = [\"edge\"],\n    edgestrokecolors = colorant\"orange\",\n    edgelabelcolors = colorant\"pink\",\n    )\nend 600 500","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"edgelabels can also be a dictionary, where the keys are tuples: (src, dst), and the values are the text labels.","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"g = complete_graph(5)\nedgelabeldict = Dict()\nn = nv(g)\nfor i in 1:n\n    for j in 1:n\n        edgelabeldict[(i, j)] = \"($i, $j)\"\n    end\nend\n\n@drawsvg begin\n    background(\"grey10\")\n    drawgraph(g, layout=stress,\n        vertexshapes = :circle,\n        vertexlabels = 1:n,\n        edgestrokecolors = colorant\"orange\",\n        edgelabelcolors = colorant\"white\",\n        edgelabels = edgelabeldict)\nend 600 350","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"The edgelabels keyword argument can also accept a function with five arguments: edgenumber, source, destination, from and to. In this example, the graphical distances between the two vertex positions provide the annotations for each edge.","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"@drawsvg begin\nbackground(\"grey10\")\ng = smallgraph(:dodecahedral)\ng = complete_graph(5)\nfontsize(20)\ndrawgraph(g, layout=stress,\n    vertexshapes = :none,\n    edgestrokecolors = colorant\"orange\",\n    edgelabels = (k, src, dest, f, t) -> begin\n        @layer begin\n            sethue(\"white\")\n            θ = slope(f, t)\n            text(string(round(distance(f, t), digits=1)),\n                midpoint(f, t),\n                angle=θ,\n                halign=:center)\n        end\n    end)\nend 600 500","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"The more code you're prepared to write, the more elaborate your labels can be:","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"sources      = [1,2,1]\ndestinations = [2,3,3]\nweights      = [0.5, 0.8, 2.0]\ng = SimpleWeightedGraph(sources, destinations, weights)\n@drawsvg begin\nbackground(\"grey10\")\nsethue(\"gold\")\ndrawgraph(g,\n    vertexlabels = 1:nv(g),\n    vertexshapesizes = 20,\n    vertexlabelfontsizes = 30,\n    edgecurvature = 10,\n    edgegaps = 25,\n    edgelabels = (edgenumber, edgesrc, edgedest, from, to) -> begin\n        @layer begin\n            sethue(\"black\")\n            box(midpoint(from, to), 50, 30, :fill)\n        end\n        box(midpoint(from, to), 50, 30, :stroke)\n        fontsize(16)\n        text(string(get_weight(g, edgesrc, edgedest)),\n            midpoint(from, to),\n            halign=:center,\n            valign=:middle)\n    end)\nend 600 300","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"For directed weighted graphs, each edge can have two weights. This makes it slightly more difficult to draw the labels automatically. You could write an edge labelling function that calculates the slope of the edge and positions the label accordingly:","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"function f(edgenumber, edgesrc, edgedest, from::Point, to::Point)\n    sl = slope(from, to)\n    wt = g.weights[edgesrc, edgedest]\n    if sl > π\n        label(string(wt), :e, midpoint(from, to))\n    else\n        label(string(wt), :w, midpoint(from, to))\n    end\nend \n\n...\n    edgelabels=f,\n...","category":"page"},{"location":"syntax/#edgelist","page":"Syntax","title":"edgelist","text":"","category":"section"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"This example draws the graph more than once; once with all the edges, once with only the edges in edgelist, where edgelist is the path from vertex 15 to vertex 17, drawn in a pale translucent yellow, and once to draw the vertices on the path \"X marks the spot\" cyan-colored crosses.","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"@drawsvg begin\n    background(\"grey10\")\n    g = smallgraph(:karate)\n    sethue(\"slateblue\")\n\n    drawgraph(g, layout = stress,\n        vertexlabels = 1:nv(g),\n        vertexshapes = :circle,\n        vertexshapesizes = 10,\n        vertexlabelfontsizes = 10)\n\n    astar = a_star(g, 15, 17)\n\n    drawgraph(g,\n        layout=stress,\n        vertexshapes = :none,\n        edgelist = astar,\n        edgestrokecolors=RGBA(1, 1, 0, 0.5),\n        edgestrokeweights=10)\n\n    drawgraph(g,\n        layout=stress,\n        edgelines=0,\n        vertexshapes = (v) -> v ∈ src.(astar) && polycross(O, 20, 4, 0.5, π/4, :fill),\n             vertexfillcolors = (v) -> v ∈ src.(astar) && colorant\"cyan\"\n        )\nend 600 600","category":"page"},{"location":"syntax/#edgecurvature-and-edgegaps","page":"Syntax","title":"edgecurvature and edgegaps","text":"","category":"section"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"The edgecurvature keyword determines the curvature of the edges. ","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"The edgegaps keyword sets the distances between the ends of the edges and the vertex positions. ","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"Units, as everywhere in Karnak, are points/pixels (1 point is 0.3527mm).","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"g = grid((3, 3))\n\n# add some self-loops\nfor e in edges(g)\n    add_edge!(g, src(e), src(e))\n    add_edge!(g, dst(e), dst(e))\nend\n\n@drawsvg begin\n    background(\"grey10\")\n    sethue(\"white\")\n    for c in 1:10\n        drawgraph(g,\n            margin=70,\n            vertexshapes = :none,\n            edgegaps = 3c,\n            edgecurvature = 3c,\n            edgestrokecolors = HSB(36c, .8, .8),\n            edgestrokeweights = 0.5,\n            layout=squaregrid)\n    end\nend 600 500","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"The value for the edge gap (either as supplied in vector, range, or scalar form, or calculated and returned by a function) applies to both ends of an edge. This is a minor issue for cases where, for example, the vertex shapes are different sizes, and the gaps need to be calculated independently for each end of a single edge. You'll have to calculate and draw the edges yourself, as shown in this unnecessarily animated example:","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"using Karnak, Graphs, Colors\nfunction frame(scene, framenumber, g, vertexsizes)\n    background(\"black\")\n    eased_n = scene.easingfunction(framenumber - scene.framerange.start,\n        0, 1, (scene.framerange.stop + 1) - scene.framerange.start)\n    a = 10 + vertexsizes[1] * abs(sin(0 + rescale(eased_n, 0, 1, 0, π)))\n    b = 10 + vertexsizes[2] * abs(sin(π / 4 + rescale(eased_n, 0, 1, 0, π)))\n    c = 10 + vertexsizes[3] * abs(sin(π / 3 + rescale(eased_n, 0, 1, 0, π)))\n    d = 10 + vertexsizes[4] * abs(sin(rescale(eased_n, 0, 1, 0, π)))\n    newvertexsizes = [a, b, c, d]\n    sethue(\"gold\")\n    drawgraph(g,\n        margin=80,\n        vertexshapesizes=newvertexsizes,\n        vertexfillcolors=[c for c in Colors.JULIA_LOGO_COLORS |> values],\n        edgefunction=(args...) -> begin\n            edgenumber, edgesrc, edgedest, from, to = args\n            d = distance(from, to)\n            startpoint = between(from, to, newvertexsizes[edgesrc] / d)\n            endpoint = between(from, to, 1 - newvertexsizes[edgedest] / d)\n            arrow(startpoint, endpoint)\n        end)\nend\n\nfunction main()\n    g = complete_digraph(4)\n    vertexsizes = [20, 35, 50, 60]\n    amovie = Movie(800, 600, \"gap animation\")\n    animate(amovie,\n        Scene(amovie, (s, f) -> frame(s, f, g, vertexsizes), 1:40),\n        framerate=15,\n        creategif=true,\n        pathname=joinpath(dirname(dirname(pathof(Karnak))) * \"/docs/src/assets/figures/edgegapanimation.gif\"))\nend\n\nmain()","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"(Image: edge gap animation)","category":"page"},{"location":"syntax/#edgestrokecolors-and-edgestrokeweights","page":"Syntax","title":"edgestrokecolors and edgestrokeweights","text":"","category":"section"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"g = barbell_graph(3, 3)\n@drawsvg begin\n    background(\"grey10\")\n    fontsize(30)\n    sethue(\"white\")\n    drawgraph(g,\n        layout=stress,\n        edgelabels = 1:ne(g),\n        edgecurvature = 10,\n        edgestrokeweights = 2 * (1:ne(g)),\n        edgelabelcolors = colorant\"white\",\n        edgestrokecolors= (n, from, to, edgesrc, edgedest) -> HSB(rescale(n, 1, ne(g), 0, 359), .8, .8))\nend 600 500","category":"page"},{"location":"syntax/#edgedashpatterns","page":"Syntax","title":"edgedashpatterns","text":"","category":"section"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"Line dashes work the same as in Luxor.jl, ie they're numbers in an array, with line length following by space length. If you want to alternate between dash patterns, supply an array of pattern arrays.","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"g = grid((5, 5))\n@drawsvg begin\n    background(\"grey10\")\n    sethue(\"white\")\n    drawgraph(g,\n        layout=squaregrid,\n        edgestrokeweights = 5,\n        edgelabels = (edgenumber, edgesrc, edgedest, from::Point, to::Point) ->\n            begin\n                labeltext = [\"a\", \"b\", \"c\"][mod1(edgenumber, end)]\n                label(labeltext, :se, midpoint(from, to), offset=5)\n            end,\n        edgedashpatterns = [[20, 10, 1, 10], [20, 10], [0.5, 10]],\n        edgelabelfontsizes = 20,\n        vertexshapesizes = 2,\n        edgestrokecolors=(edgenumber, from, to, src, dst) ->\n            HSB(rescale(edgenumber, 1, ne(g), 0, 359), .8, .8)\n          )\nend 600 400","category":"page"},{"location":"syntax/#Arrow-control-for-directed-graphs:-edgearrows","page":"Syntax","title":"Arrow control for directed graphs: edgearrows","text":"","category":"section"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"For directed graphs only, edges are automatically drawn with an arrowhead at the destination point of the edge, to indicate the direction.","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"To hide the arrows for directed graphs, use edgearrows=false. Or you can specify an array of Booleans to control each edge's destination arrow.","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"gd = DiGraph()\nadd_vertices!(gd, 4)\nadd_edge!(gd, 1, 2)\nadd_edge!(gd, 1, 3)\nadd_edge!(gd, 2, 3)\nadd_edge!(gd, 1, 4) # vertex 1 to vertex 4\nadd_edge!(gd, 4, 1) # vertex 4 to vertex 1\n\n@drawsvg begin\n    background(\"grey10\")\n    sethue(\"thistle1\")\n    tiles = Tiler(600, 600, 1, 2)\n    @layer begin\n        translate(first(tiles[1]))\n        scale(0.5)\n        drawgraph(gd,\n            vertexlabels=[1, 2, 3, 4],\n            edgearrows=false,\n            edgecurvature=50,\n            )\n        end\n    @layer begin\n        translate(first(tiles[2]))\n        drawgraph(gd,\n            edgearrows=[true, false, true, false, false],\n            edgelabels=(n, s, d, f, t) -> begin\n                l = string.([true, false, true, false, false])[n]\n                label(l, slope(f, t), offset=10, midpoint(f, t))\n                end,\n            vertexlabels=[1, 2, 3, 4],\n            edgecurvature=5,\n            margin=20\n        )\n    end\nend 600 300","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"If you pass a function to edgearrows, the arrow will be drawn by the function, rather than by the default arrow rendering.","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"using Luxor, Karnak, Graphs\n\ngd = DiGraph()\nadd_vertices!(gd, 4)\nadd_edge!(gd, 1, 2)\nadd_edge!(gd, 1, 3)\nadd_edge!(gd, 2, 3)\nadd_edge!(gd, 1, 4) # vertex 1 to vertex 4\nadd_edge!(gd, 4, 1) # vertex 4 to vertex 1\n\nfunction edgearrowfunc(edgenumber, edgesrc, edgedest, from, to)\n    sethue(Luxor.Colors.HSL(360rand(), 0.8, 0.7))\n    s = slope(from, to)\n    arrow(\n        between(from, to, 0.05),\n        between(from, to, 0.95),\n        [25 * s, -25 * s],\n        startarrow=false,\n        finisharrow=true, :stroke, linewidth=5, arrowheadlength=30)\nend\n\n@drawsvg begin\n    background(\"grey10\")\n    sethue(\"thistle1\")\n    cells = Table([300], [300, 300])\n    @show cells\n    @layer begin\n        translate(cells[1])\n        drawgraph(gd,\n            vertexlabels=[1, 2, 3, 4],\n            edgearrows=edgearrowfunc, # named function\n        )\n    end\n    @layer begin\n        translate(cells[2])\n        drawgraph(gd,\n            vertexlabels=[1, 2, 3, 4],\n            edgearrows= (n, s, d, f, t) -> begin # anon function\n                adjusted_from = between(f, t, 0.05)\n                adjusted_to = between(f, t, 0.95)\n                # thicker lines for destination vertices with more neighbors\n                linewidth = rescale(length(neighbors(gd, d)), 0, 3, 0.5, 5)\n                arrow(adjusted_from, adjusted_to, [10, 15], linewidth=linewidth, arrowheadlength=20)\n            end,\n        )\n    end\nend 600 300","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"If you use this function, the edgegaps keyword information is not used.","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"The edgearrows keyword is only for directed graphs. Use edgefunction to draw custom edges for all types of graph.","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"vertexfunction and edgefunction allow you to pass control over the drawing process completely to these two functions.","category":"page"},{"location":"syntax/","page":"Syntax","title":"Syntax","text":"note: Note\nIf you use the edgefunction keyword to draw edges, all the other vertex/edge keywords including edgearrows are ignored.","category":"page"}]
}
